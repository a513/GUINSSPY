#  -*- coding: utf-8 -*-
#

import sys
import os
import webbrowser


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

v = sys.version
try:
    import ttk
    py3 = False
    import tkFileDialog
    import tkMessageBox
except ImportError:
    import tkinter.ttk as ttk
    from tkinter import filedialog, messagebox
    tkFileDialog = filedialog
    tkMessageBox = messagebox
    py3 = True

import types
import subprocess
import time
import pexpect
if (sys.platform == "win32"):
    import pexpect.popen_spawn
    if (py3 != True):
        import PIL
        from PIL import ImageTk, Image

import fsb795
import string
import random
import re
import codecs

global SignBox1
global NSSname
global self1
global openDB_16x16
global img_opendb
global img_anketa
global exit_16x16
global p11_16x16
global filename
global toknss
toknss = ['NSS Certificate DB', 'Builtin Object Token', 'NSS Generic Crypto Services']

def slashescape(err):
    """ codecs error handler. err is UnicodeDecode instance. return
    a tuple with a replacement for the unencodable part of the input
    and a position where encoding should continue"""
    #print err, dir(err), err.start, err.end, err.object[:err.start]
    thebyte = err.object[err.start:err.end]
    repl = u'\\x'+hex(ord(thebyte))[2:]
#    repl = u'\\x'+hex(ord(thebyte))[2:]
    return (repl, err.end)

codecs.register_error('slashescape', slashescape)

#путь к ПАКЕТу NSS
global patch_win
patch_win = ''
try:
    patch_win = os.environ["NSS_BIN"]
    patch_win = patch_win + '/'
except:
#    print ('Переменная среды NSS_BIN не определена')
    pass
if sys.platform == "win32":
    p_win = os.path.dirname(sys.argv[0])
    patch_win = os.path.abspath(p_win)
if len(sys.argv) == 2:
    patch_win = sys.argv[1]
if (patch_win == ''):
    pass
else:
    patch_win = patch_win + '/'
#    print ('NSS_BIN=' + patch_win)

filename = ''

view_18x16 = """
iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4wUXCSwOiHJe/AAAAB1p
VFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADQklEQVQ4y22TS2hcZRiGn/8//7nMOZnMTDIzpqmYIU2KtVIvRBRERImoUNu4K4qCFxAqirhx78aN
C0HES7GC6MKi4EakggsRKRSVWKOLhmAMaNKYnDO3c2bmXP7fRUJE9Nu9i++B7+X5RLcTmfWoYC3KASiylE6nQ1ByGeUaYTTSdvGDAAz/GiGgLvu0ajZqPSp48+eMk3dM
kecZ/SgkmGiRFxlkOW4QEAQ+E56hMKCNwZICz3T5dVPwxjc9Xrm1j7oaZjy8MMX7y4a830MqHwOYTKP8KsqzKTsQt0N+i0ZsbsYs3dXgre/qvLqQU6TrxIwjPv1xy+hG
ndcv/MSZW2o4SpKkGWO+j+WV9qCAPrhH0m2H2MpCS8MXq5JnWl2UzjPauzsU0uX0zRW2eyk3HpqkGowddBFrw9WtEeO+xaQ/IjN1Cl3w+8jhs+U1KrU6qh1FuEfmKIot
zl3a5sMrA748e5yXLv6BpyRHGg5PnKjw6EcbPDQrcCR0BiO0cHn23jKq3EBIiQoCn14yAK1ZPDZJ63rFdFnx7ulpCkALiHN4bsFlrmFz+2EX5XnEcZ/Yr6NFCGjUcJRi
LAm2ww3NCpab41rgWgKAHLiWdLmpaVPxJePlEoPhgMONBqtDSWEAAcpRFiMkllfmg+8j3rkU8vXZWS4sd3CUZEINWZz3ePrjDZZum6S12qUnApSzy2P3NND7bqm0MJTG
x4GQ++fLVEsW02Wb1xabxMWA/lCxk2heuO86moHhybtbWEgMsDLgH1C1WiXSYAzMTtiU7ABbScI0YZRm5NpgK4sThyymp+rkSNJ9JQR7IKNBGcxeAM5fjjh/OeKTx5uc
+/ZPPCWZaficPF7ixc87LC041PyEMM7RwPMPTqGBdriL4oAueGB+jHGVMuFkvH1mBi0k/cGQ2Hi8vKiYqTucmh+j2N9ZSSDt7OKXPJQA0gLuPFYnsgXNKY9fhg5XNgzZ
sIdfqeG6DnNHfQRwcXffUgM/rIVgl+gnXcTKxo556qsR3WFBMYxBCKSlKEYJaqyGUC7/eXsg74Xg+NjJX7z3SBPR7bTN6rU+a9s9sgJKrk0yGFKpVLAc5/8YtKMQz7Xp
9xOOTldp2CP+BgHpZjZpGm3KAAAAAElFTkSuQmCC
"""
update_18x16 = """
R0lGODlhFgASAIQXADMzMzQ0M01NT05OUFBQUgGf7gKf7gOf7gGg7gGg7y6gjy+g
jzGhkDKhkDOhkTShkTaikTeikTeikjukkz6llUOllUmml+/w8e/w8e/w8e/w8e/w
8e/w8e/w8e/w8e/w8SH+EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAB8ALAAAAAAW
ABIAAAWF4CcmiFEYSHoaBpmwYlwUSJGQ86zmRez/QBFKBCgGikbAEQkQIojMqLRp
IgaDxU/10/xYGArJNbvtKs6KxofAbmcPPe7HgT5jm3ArpK74DP6Ab3FmaA93H3ly
HxQSChMiApGSZINXQJRWHwoMDX2HPll1UEoBSz9IolNZQQoRFQuWsbJAIQA7
"""

icon_openfile_18x16 = """
iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4wYXCDgNebfI9AAAAgZJ
REFUOMuNkz9PFUEUxX/3zuxbQAlSkGhhaWEwRhNbY6Extmhi7Kz5CH4P/RZY2FnYEG20sKOSaExEBNTn44+P3Tdzr8U8Hw8k4G0mszvn5PzO7MrrO/PcfLXCSfPm3pXr
9bnwLtQS8SMvFZqttCwAbxeuznY/9BfcCQcnisL3SDPzE4/mF8/f7cxViEp5bg6tE6ciK0/XiADd1f7Da08uPtOACoK7I5WgAFGQCZE4HQ6Fsex4MthLuHkxcqeuJlVj
LSK1IB1BRJApxRsjnlXcIXrA1BGHrJABQkkYAVK3az64gHcEiQEUpFLUgQ5IE1B1jIRkcBfwDA4SO2AQt148eD59+fYNjb8LvgqFCeRIqYfqc8j9lv7Hl0gUos7N3a8v
LY6dEP53rPeN9v3SAVqZ3eFWjokwFgMbWw0VGTfKuPdAAhBOSZYYadgGP2S0A/KjiD2AnIDnBmLFUH7hB7dmwAbwtRhJOAZr1ApIGqZNwC4iERgQsQxs4qwNseQELB8Z
iifE+5AFHCJmwHfUNgDFVE8xy6g5WAJaDMXxv2hdaDYhhvIRov/6+BANIDlYhpRHNUSJWjaxLSVbUbkabo7j5Uc1QV2LLghEJ2TDg2KND+L+6pfl9fWlW4PeLm030/40
9rcb0p7R9MCahJ6pqCedaiZQz1R0ZiOdWSVMKe3nwafBjj3+A1B95HRZw8dhAAAAAElFTkSuQmCC
"""

anketa_34x50 = """
R0lGODlhIgAyAOf/ADMJEzUMGkEOFz0WGDwWHUcWJkYaIygmKkkgHSYqLCIsLSUsMkwlKi0xMzEzMFAtLj81NmIuH141ID5APUxDOUhERmI+QkFJRW8/MUhJR1JJT2dG
Q1hNMk5RUVVSRl9STmFSWWxSO2lVPXFSU2hXSW5cQ25bWGtdWW1cXodiS3lpPXtrRXVqa4psYXVxb4RtboZwaKdvNox0c/NmNvJnPe5pNZWDSu5qPJR/fJiDVvxoO5OC
eDGkZeB0Qdx1TeJ0SO9xRvRwR/ByQJiFhzSlcu9yTOt0RbmEQut1U+12Tuh4TOd4Ukukbe13VOR7TOl6VOh6Wut7T0Wpce55W+R9WfJ7Uvd5WUSseaOOi/V8Tex+Y06r
ebCUSOuCWK6VXI6ebcSTSJaedbeZR1CyhUy0gJWffFqwhVWygLaaVbydRGSxh120iWK1hFa4i1K6hly5hmG3jMmbdLSem9uZZqKkoWu4jtmfR2S7j+ycRbSknLGnm6qp
oIa2ismnadGmXpK1kcWtX76qmtirXLytqNeuUNSwSbWwqfGlbuqkkPSpSNyxTOitY+Kteu+oiO+rd4zHpZjFoum1U8O4q8m7fNO7cu23Tve0ZOq8SPS5SpLMsfOymZbN
rPW4Zu66c/W8W5zOtNnDgO3BXPG7ofnDSvTFSfjDUv7CS/zFQ/TGUurHbM/JtPXIW93KkqbXuvLLXPfKZPPMZLTXv+nOfq7ZwOLLtfLIqrnYu7Pau9bPwfvGsfjIq/bI
sfbQb7vZyfLLsu3NsvjLu9zTzPPOu/XThbrgz/vWe/PYiPjYgujWy/PUwOTbrfnZkPLYu/bdkuTc1dDjzuHez9zgz+Df1vXfoM/l1/jgm/bij9/h3t/j0vnczfXhqdHn
2ffd0+fj1PzhquXk2+Lm1ePn1vvlpvXns9ns2NPu2Pzluu7n0u3pxvHm2ebq2e3p2vrqvezr4u/r3Ont3Pnrxdvx4/Ht3uvv3vrvuuby3/ruzffwx+Hz7Pnv1P7u1fvv
3v3z2Pr03vX23////yH+EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAP8ALAAAAAAiADIAAAj+AP8JHEiwYK9Hj4gVXMiw4cBMcNi4gfPJocWG1Oq4kcJkTZ1tF0MOnHXn
Cg8eW+7EEtkQXzx8MFvdOUOEiBk4rcjpLFePpcBMZtQIhdOG6Bs4b9aYUWpmk0Nu2aJy44YM0ps2b7IehcPVaJuvkJIxG5ssWbZ/iJKoVWuESpmucLvWgfsmzBIgRYAA
MVKkERQdRaoIzkLlC5kxZxArHsMY8ZkzZL50yWIlihUgNJ5ACSJq1y5fwmjxkbKl9JYrUq6YXr3lzy9fwJIJ01TkyZQmC5/Z2r37lu9bvHnHelawXxPbuH2K7IfkSZPk
A/31U76Q+RPnA/tpO1bMGDzq2Zv+LFECvZorMDEiFfv+b5379+4sWm8uMB8vUovmRCpV7Z88bAAC2M2A4BRY4IACMbcEff/As0opnTASyijL+PPPOxhmqE6GHL6TYHPH
CWQPL2mQYMIKivTXnjostuhii+skKF6IAk1jgwMQcAAIO/+0E+CPQAb44RNIQNfPNKmEIss44Mm4xHMF8cNPk9k1xyBDFoJn3JNPUOmQcUR26SVDxpEn5kD76DMdlVvS
+E8+08CyyjA8NmlcFDQeWUoieGACy3fvBNnNRUiYKSIso1hyiCenVDPdPBjOA2mHGbYz0BJcCuTgJX7EQQiF/8wTDjijkhpOqQWO+s2lhr7Jixj+H4CAooqjnmprqbeu
KhCm2AmkDRoilKACJfcI5I4767j43jrHumOpQMc9mZ0yoIDCCjpeRgudQPzoM+Y/4vX6bUFNRCHtuOQmIS660Kq77T/2sJPPmE2AOFA+xqyyCizTDNRBB4YYK89FTSQB
RRIDGYOKHUdUsoo5/9DRwAINZLCHSE0ocbCIr4zCiSOVmNLMP4ZAcIACCiRwAR3XSAONNNHEDM1A4m3c4CqX9BGHIKUc8086J7AwQQIJoOyBKudciOGz4EZhcz7FcFGB
BiUU4o1AzuDwggsVJOBACBKkkEc367zDdLhIDDSOFxyIoMIk9vzjzoC4YCHDBxSkEAGcBgFsMEg02AjkzxNKEEkQPdYUI86UC8mDyw6BtIBAAQIQ8EIwNDv9rk/OyDHC
AwYA8EAe0C4BhRJrNumOJDBYwMAAQ6Tz3BRO7DMuNHrIgAIyT04hhCa5eCb88MQPr8vxtRy/iy6+NAJEElrMQAMNN1RPffXY11B9Ddx3X8MM4Esvvg5KpKUXXuenr34R
7Beh1g89GPED/PP7kENAADs=
"""

nss_32x32 = """
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
TkSuQmCC"""

nss_143x110 = """
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"""

creator_small = """
R0lGODlhPABOAOf/ABQUHBwTExYVGBgUHhkVEh8UEB0WGygVFxkaIRkbGRwbFSAaFSQYHiQZFxgcHhwbHh8bGiQdFCgcFB8gJx8hHyUgGiMgIx0iIyofGyQhICkgISMj
HDIgHjcgGyskGTAjGjEiJy0kJC8kIDUjHColKSomJSwmICUoJzsoGEEnHjspHUAnIzItGDgqJzsqIzYsHi4tMTEtLDQtJzUsMi8vKDguLy8yL08qIkssJEUtL0MvJEcu
JEIvKTkyLEguKT4xKjY0KDczMjU1LTM1OlExKE4zKT43MTs5LUo2JTc7Ljo6MjU6QT86Kkc3MUs3K1szJE81Pl8yLkE5RFQ3Iz87OjU9STs9OlM3M0M9Jz48QDk+QFo3
Jlw2Llo2NUY8P1g5L2E2OD1BSGE9NmM9MWA9PFpANGc8PWw9N0VHSlFERUlHRUNIUGdBME1GTnE/MlRHQlRGT0tKQ2NFMFxGQXNBRGxFPGpFQ2JJPHJGMXpCR09OUVJP
TYZHOXpKQlpSV3ZMQnlNPXJOTXBQRIFNP2RTYV1XVntROlZaV19YUXZTP2xVT1hZY1laXY5TWIlWUYtXSYhbQG9gYH9eUGpjX2NlYIhcTWtkWHZhWZFbSHFhbGBna4Rg
TGZmbIZfXGtlcZViVpRnWmxybn1ubJBpaJVqUXZve5JsXnJ0d4tvYXJ0fpVuWnt0bmx4gX97jKR1ZK10X595WKF5X5p7bXyChJ97ZaF6boWBfJx7d32Di3iEk5CAfLiD
eqyJbKmIhayKcrCIe5qOiYmSoa2Lfa+NaI2Sm46TlqWOiKiPfrmTdrKWj8WShLeWhr2UibyYgZqfqJyho5mhsaefnL+dj7Khlrmgj7qfmMaio6WstMGmn8elmcKnmM6k
l6qvsbKuqL6tpKmywciun8+toMqupsyxtcW4r7S8zNq1o9i2qda2sNK4qdG5sNe5pb6+wLvAyb3E1N/BrN/DtOPDvd7GvcPM28zMzM7P2crT5OzQx9DZ4dHc7dfk9vrf
0+Pq6eDt/ebz+////yH+EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAP8ALAAAAAA8AE4AAAj+ABMkeGBAAwYNGg5oCFEhw4YEDhxYsCBAAIUYMnrIMFGiB5AeIIGIBCKk
JJAjST4eYXLkCBAlQjYEMFDRQQIBDxJMzLAQoQYRIkqUoCAgwQaiFmnQiME0RpAeT0H2cFmyJUqVTE4eUQJkAwECRQVCTECBZwiEGESYCGEiwwMKZB9UpEBDho0YNIRI
lWoEphIlLZMItlqyZA8PCyoKzGkzAQSfbEWcDWHhAQQIFhDMZWqjZOe9RvRWdSlYsJCWhYUgBrt4oMDHFdZKRuj2gYMHJB4AGHCBRA3PnT2fTi1EpNWWI0/GXCBWbETH
FSqUCIGhAu0Hby2UsDBgAA0rVNT+xFFD3ooVJeb/CvkbePDxkRUgKBZr2/GGhhkyrA1R+ygFEmEwEsopnJwSSiicHFJIIQr6cUgcSfyVBEruWQXfV85h54ABD2zg4Ych
hLDdBRCccMgsxBRTDCuzcKLJKZowwsginHDCyCHnlaREacW9B4QMGmDYGgIIYEdWWfllUAIJF5wQiopQ4jKLJlRqssiVVCIYB3HoWTGaS0cUt8ECCogFAUQ1CbRTBg4g
MMEJszyjopyz4AKjJpQwYuUilIQyZRxKBCeEeVZsBRhyQtAwZpmvJaDZfBmciV1OhTxjKTHO4CIlJ6mkwkqVp5wyyyyhUGJFZyTtOCFMJ8GUKAT+BZzp2kDYFUkBBRbQ
moAN3FjqDKbESFlnnamcwsopxcLICBqpaVUcSIX9WMECZJZ5mQURIXACCdyS8GYCz3DTqzPkEhNsMcJy4omLVObJSI6F7XiEUj1EK0ME1SqgLwQTXOAvriW0VRkavT5z
zcHlFmNusLh0qgknlByihx7nCQqYEjIoJQNJxXmgr7WX9dvktjCcEJEAlhosbsHPkItuKlSuy8kie6iRhRdG3FWCaErUgFfGStGAQQMNVBBBdBVYQMEJMMDgFAkDWdEN
MSqLm3KwmqzBiaYw6vHGDzzw0EQTR2ikWgkYxXCXDTSYsEEHI2DwgQcfzH0BAhbYIJT+iBc4oEbLgFuq8KeL4JLiKX54UQPYYfOgww9GaKRRCQycIIMMJaBa1wsvqMD5
CyxYMMEEJCzJ7USHkNuyig1TiQu5pxQCRQ4+7ICEDjzQHrYOTfzgAkglXBYw2zS0ZAQWWLDUgxGiTzQRCRpYoAEjdK5iCyWr4FKMwcREMkcZZIgxRhFF7KBD7ebr4ETY
LnDQQgsVbCAUUxlEFwG+C0SAAd7OT4SdAWEoxixsYQtgFDAachJFIBJhCEAA4g91GAMRnFAEHeggfRZcwQpawIG0LEBJQpkWvgpAQglIgEhFmhR2JmAAZ7CjG92Ihgxh
CIxj/IIWqogFKCpRiU1Iggz+VyjfDpxwux1osH0HiZRQTGC0+y2AhBE4IQofwID+BQGG3SBHN6YxDXV4AxzpAAc1lnEMX8CCFKSoBAS5wIUobGEMW0ifC0bwgQZsoAEW
IEGk8reArxSgASd8AAIGAAABbGgCFKBEFsnBSG84UhvpCKMYj0ELUmxiE2o8wxnYcIYo1IENFdTBHD+AgQg0AAKRmtYCAkCAAASAaESSSwofYAEY2GKRjCQHNr4YyUhS
wxeq+IMchtmHYvahDmeogyC+IMoV0LGDp7yMKltJgD82YIoAwI4FsuAHXDayGmCMJDi0QY1jqCIRbBgDG/rgiEGocQx1qEMZ1qcCFXwAmpf+uQy1XElCWKIQAAgwQN6A
QQ51ZNGR0wCnOKmhjWWgQhJlKMITnsAGTJzRDTcoAhLWx4M5jmCO0clAH1cZgAK4kmgVSaEBDMAAIXgDG/JwpCPFUQ1xgGOc1KCGJGQhCydMYQtthMQwSPGEHaggBSlQ
Afta4AJSaiA+X6kmCV+JgYpkM6ArjYM2dhEPLzoyHTUdZzNoQQthiKMXlQCEHLjghlgggxRsQEEH5lo3FYhyjhwQgQeiGtVXolQAhSQIh1ogjVecw6beUEc6tGFTcAy1
FssQRi1AgQc24IEUzViGK86Ag7lyAJAjSIFH87rXvpZ0ARVoAGABkE2CNIADynj+xTbQIQ55qGOc6rjtWGlhRlVAwhCVcCszmKGKM9xgrh3gAAdGENpniqACJm1lAJ64
AAxwYDesFcBKD3CAXexiG9LQRkyxAUnFasMXvIAFJipBiljE4hfgFYYp3LCFFCR3BXOcK3NHIAIOsNIArixpAzAggQeARbsrZcABXKEMZTiiGjGdBiThIQ90LGMZlSSF
K14RC2ZsIxvSMMUZJGjfFaRgBR1wJh1dgIECrNSVCxhwKbGzmwGs1AAHAMU2PvEJadhWHJGUR4WlsYxfuNcVpMDEL7JhjnDUwg1nIMIOkEpl0Ta1BR/oJ9Hy14AFFDgz
3bkxA/6wDVfE4hjwSHP+muNBWxAzgxc6xAQmmiGNX0h2EH3gAg5wUGUc4NcFLRBBlytQHaNJIIp5PMEELMBSntwBvNKQBYWFbFt1ZOPSzPiFevkw5z5EQRby/QMRvrCD
Hex5zytAgQt+8NkIaCADHqiABzzwgg88byIaIAEISnAHIp8jHJOWBzwUCw6aMsMXrhjEIEzBC1LU4hagEMRRi+CDU/N5BSr4nQcAiQFae6DbHuBABiiwnW6BYAY5GO45
4nEPSsMjHukQB6Zr8QlHCMMXvuCpJARRhnlecAdFIAIOdjBH321bAuCuG61doCQS5JFb567BLbYB7ElPWh3iEEedQeEKMh6Dp7JAxR3+BHGHOdwOB0QQogtc0FEJDHjW
Clf4CfYWAojXoAaKiMc7gi1kjIsDG8swxS+kkYxeGOMYqECFIu6w9Dc4oXZFGLgPOvqDFmDg6hGY9f2+bYKZLylEJJhBDWbwA13Eu92U9rk2jiEMbRjj7Ue/hSkCcQem
f+8K1S711HlQ9aFdXW6z9oBaSjBzboUgBmKfARSacIlq3CPNPbepNpKRDGwYQxfGQIUpRhEIMZThCt+bQxOCKHDc8Z2DDfjAC1yQVBTUUwVCWVJTxE4FL3hBEbVVMzwk
+fNkVCPpx1gGM3rxCTdwgQg+yMHY8B51Uf6A1cql4wdG0IG51W1JM5gBU7L+XwMlNGEOl2D37tMBj1+DA+PTuIQstAEOIvfiEX0YMbVX8IPlO+5xPbB6WmZ9EKRVAAYk
0DQzkBFBUANG8H2o0G7lR360JQ65NQ2SIA3yFlmqYAhuMAZj8AVFgGI+4AROYEEqADkt4HJDQzRbFh0woH1OEQPL4wW1dwW3oIDpEA7kF0bxZgzCkA00hWGkMAhnwEZE
IGUAdwVNEDbPV3UuBwHUElX55DRqAxVBYARUAB6UMA0yGA7Adg6RlA3VUA2XVg33RgufkGdPEITl4wRl0Ds/IASRY3UNsQEKQABicSsx4DQ2EARBQAW1ZwWnwA7YEA9p
9mvhcA5aeFjogA7+4ZANmcYLrvAJgzAGxydwReCBfBcaR1B1IQWHzUGHToOHeXgzcUAP/KAOgLh7WEiIWIiFh3gOYMgLqgB/UVCGAucDPmBBP2CARmAEL4AB+VECcSiH
CXACJ1CHMDAEQ5AF4WEF3OAP/UAPpAgP63CKiSgN1KiD6FANRkYKj9BJbHR8OFA7IfgUiyMDDTERArEBJ2ADVjAENmCMQyAFWUAeocCM+lAPh3iIqRgORHZh1EhktWAK
oOCDkPgFszh1HgEEuWgEMoABZQEXG0ADd2gFNDAEVpAFUiAFthcG/NAP+tAP+TAO4oAOgjiNF7YM1ChZkzWGf5BOX4B3PrACPND+A34ROeSYH7eyNDZwhzGQBTyZBWEQ
BpxAj/owlO1QDdggb5cGYiZJjZEFTJUwCBCEgQTpkpCTh0qQiz3QFuMmEOloAzfXNGtQCq0ADfjgkfnQkf1gD7pQDdUIYvu4DM3QDMjglJUQQXAUhLTIAyyxHlepEeN2
K2TRlTBgBdtzDd/gDvPgDh5pD0PZD/3wDJewDNTQj8uAb8LAC/nmCqqACfHHBV9AQdQ2dVX5F0YQBPBjk0vzHTBgA0qAmNdQDvPwDeWQlvZwlo5pD4gQCMIgmZHFC8Pg
C7GgCpOlCpUQfxrYBHg5dbk4A30RJjXAiw5nAReQkzlpBe1QDu1gD/b+AA3foA/24A62yZHOcAWCUAvCIAy0kF6xYAo85AhqFEEaWARdkJdHkJDscQRAkkfO05VagAb1
8A3tkA/lAA3QoJ3giZZpSQhkcAadYAqqYAqbYAjx9AcPVAdiIAYaGER49wMt4Sp/8RT8ITq3IYxZoAdo4A7f8A3bSS7z8J21iZb64AwrAAZ2IAiS8Ad9wAZicAZ/EJUX
+gUt6QP29QE04KEf2gMi8B8lcwLGqAVhsAQo2g7uAA3OcA2IiZhn2ZjuAAVdIAbxNAZiwAVkUAeb8Afi8wUXWgY7QAajIHKKEAlvYChCEAQ/EAIwsARDoAVa0KR46g7g
+Q3k8g2x6Q7+5cCYjWkPkXAFXKBOkNgFXVAHiVAHXQCmX3AHl+AN8SAO1lANlHcMktAEf0EFNRAC/akFS3CqWaCnVuAOtUmgzqCiglqo+mCb3zAJV/AFiwqJXOClyEQG
XHAFqKAOtjUO1mANySBZpHAGoGoENwcCVqAHayAFYcCTqsqq20mg4BkM5aCiZ5kP0LAIVxBEX4CBbSQ+8SQGnYAN7aap1dALyXALnVAHX5ADoVqAIKAGa1AFVXCq/Aql
+YCiB4MP5ZALslmwucAKcBCuQDoGUcBGaCo+ydBuGIcN1jAKdqALi4CRU0gFxggDLUACWpCv/XqqQ1AOAoqighoMwZCiwQD+DQcbDAmrqIsaBWAApGJwB+cgZL3XC53Q
B5fQDhmLjFQQsm0gBSIAAkugryOLp/Pwr/Ygm+WgstAwoPMQDKzACl5wq+MqBlGAoVsgCeFwD2H0rpIQCHZABrowD4swrVOYBYvgCcFgAEirr/t6qnWbDy36tFOqKVM7
oGsAB1BwBY7KBemEgWOQCO8gttiADbdABnZwfFcADPWwBnrgBT3JCJ4ADQNQAklLt0mbBUlrD/Mwq4cZDKlgONuKbmDgqF2wumOQTGMgCOmwD+qADZwqCILgqb8aDfWw
CGjQkyXqB9CAAGrQBmFAt1Xwk2GwBgeaD6V7usQADVIQuF0guI7+agY7uknLQLuLWw2jIAio0AlmSwbR0A6cAAcTowZ6wAh6gAsX0AaM4Af5qq9hgAZrcKL54JHl4A6t
0AqpUAypAAWBSwYETMCa5KXUsA/woA1d2At/EAidcLZiQL7skAp+sAc1gwZ6MASpMAF6UAgyIr9VoKc/qZhpWbWtgCzFQAhQAAbhc6F2YAd1EAWmcA8KXE7GwLN1wAVm
ULNXQMGccME10wZo8Ls2QAkLMgmTUAh64JNZgAbz0A/+oA/f4L+hUgpQUMDxZAZmYAeB0Avy8HNdaJS2uwy1IAmS0JJkAAzs4AlCrAZpAAeWWwNpgAiIsMSFEAnsuwRa
kL+OGQz+pVAsq5AJBSzD8VQHknAP6EANY0zG1NCpsmAKYvDDpfAMQYzBNZMGakAFPfAGSlwIlGAJk4DEe4AGfpwPweAJpVAKkbAKokAGdxDD8SQJ7Fa7tjvGxgByqCAI
8vQFZJAGq7DEmFwzNlMDlKDEiGAJokwJzMwI+sCM7pALq5wJomA9osAGMYy78LAPioxxjdwLkSwJFloG41oHTYAIlDDMe+AFm1wDh6DE8KzEkTDKUuy8qxwJopDPtqAL
l+DFssvNtrWp50l5RScLmyAG1fsFZSAGOeAH6TzME6MFnRwJheAH8zwJkTDPlOAP/rCdpUAI1awLurDP/CwI4QDQGPeirqAACrXADJwayXUQruFDBj7wBg+tzllQA4Gw
03YwB60sz5PAjFFbCtS8CtZTQMCgC+KAdoeIDQDZCY3gCJ3QC7WQDL/wB+QMpF2QA548zIiAwYrTCY5wBmc7B6JwzErMjN8gzZlQCiNN0sDgDfdwD7mlDtZwC8XkCI6Q
B3RAB6CADr/wiOKD0OccCRhcCJjsB1LQAoEQfxNMBoGgCBg9CQEBADs=
"""

exit_16x16 = """
R0lGODlhEAAQAMYAAP///5gBAfz398+Hh6AVFdJSUsMAANMAAMYAANJRUdNVVcgA
ANAAANQAANRYWNFOTtBCQtBISNBEROmjo9A/P9VcXOq5ueuysuyKiuq4uOqwsJwH
B9E8POmpqe/Bwe6jo/jk5NxyctdiYs4aGuSFhfvw8NcaGuyFhdaamthqavHJycMJ
CeOJiccXF8kfH841Nfba2twaGtEuLtkpKeqYmPCUlLYYGONaWuJsbNciIt1KSt5C
Qvne3uFhYd57e8sqKrk2Nv//////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////////////////yH+EUNyZWF0ZWQgd2l0aCBHSU1QACwAAAAAEAAQAAAHgIAA
goOEhYaHhiUEi4yNAYQDFRUOlBoKBQUJHZAOCpcFAAkPo5uDA5kiAA8AAgAREaWC
A6MAKREAEoIQE5ARKrgSEBAUABy8phCCFCsGzQAGJJAUHM8GCNcAC9Gm2NkLCwAq
DCeQ3wyEHgwH5KYM7uoHDfIN7IMC9/j5rYj8/YaBADs=
"""
openDB_16x16 = """
iVBORw0KGgoAAAANSUhEUgAAAA4AAAAQCAYAAAAmlE46AAAABmJLR0QA/wD/AP+g
vaeTAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH4gUTEwU6uA9X9gAAAB1p
VFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAACtUlEQVQoz0WS
TWhcZRSGn/N938zcOz+Zn8RMO7WYNIaqlOJPqqhYKC4qiAuh4MK6ELp1ZVyEgtSN
O8Gd4kYXblyJUSxIqQVXVZoSkP6GmLbpzyS0k5nM3Jm5d+49XdzEntXhHF54n/cc
OXnqM1sslaa2g+CjQmPyLTOWn837fkOMSLfbW5dgsNa53byQNeanH7798go7JR9+
cvrzytzzX1RfPojks6A7G1UQSftBSOvyDbaWVxZufbf41V+dS5F988QHF2rHXsJk
HaqaClSfiFXBGvx6DQnCp20Yn/v3+qVNN+z2CK7dJlMrAZAAiCC7QoBEiTs9gs2W
SqUgAK443SD/bIPuyl0MQiKQwaDASBMEUBG8/U9RTlSHN9YBcIxibLnI2OGZHXvg
NEWNDf+XOMtw9T46iAAw3dV7dK+uYYxJwzBCbCAxqWVEEIX+zbu0r/yXzgHn7Z3A
GMvm+SUsglpDmE3TzESKHSmJFbJ7xylMNRis3kuFtpDDm6qTrVcBsCq4RBEVQqcg
hnCjSRwHOKLEEz8EcKONNsY5yOkuItEuWDzizvVfWPH/YZgZUKiWD+0/fmB+4e2v
P7WHXj96Jt4K8PbUUJGd24ERy4ObZ1kqnWVohsTE+MUMYab/iqhZc8XpfZSPHOTR
31dxYomskvF9HMqKdxErGZw4qtkKC8/N8/ODRdavtT52GifYks/4sRdT6BjC/hC3
3UW2YbrwDO/uOU7RlVhqXeZc80+O+G/MmXirez5stpAk/ZBIFJPPkVTHyIcVmuEG
da/Ow+FDvr/1Iy5x9INw0b4wPnuRjC3rcFSO2t1K3BuggxCNEsz9iFZ8h9/av7O8
vQwjYbK/r+21yvMC8A4zudrJ916rHJ6doeRNFnLeRJjEURwMOo/Ky9optd+Po+RV
5+wf5d7EN3NrR399DEo5KSGGFEpfAAAAAElFTkSuQmCC
"""
svitok_40x16 = """
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
YII=
"""
me_393x295 = """
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
f/jBp/0OXd3bebS/eP+rrx09/eBr772edtvf+eY3/58f/UmxWDRehehv7K5vrO/Mi/Gc6fPf3NGRVserr7x5fXNr23K0xIHl3uHRoqjHs+r/+v4vv/Puja9d07nu/t3t
u2fjKdn28aX804cvvn7z8o9WZVOHq3tvspInnxzduLC307lO3urRqNWhcl63W6liPj04yXWS5IkHqqM/fH42XWVFGYu4+vg3v24pq1ujJmlzg1kCFWoFxWI2bo93t3fX
jD1dLVZJrqrlLGUZjvonB09947u5RWGOkWMM7JXShKAES+dXhaubMlBVFmWeC3PQmlBQWBBRhBkYAFFAIQFI44NWGF0DLKBN3k7nqzpyZJYktXmWNSguxBxAQDQRgBiS
Zb2s6yrEfpq1OAQAZIG83R4fPYr9nby/Nk7bYTEpmkZpqH1wXjqjS+ubF/tdlejm008++fz2bza3t8pFwRHyJE1MilnOYhJjE2PKMiqFmkgrqiIrAudYEEUgeGeU1WQQ
CRgVKgFgZqMtEiF7AgIJiU4NsLGJUtoohYAIAMJWGwWQpkmeZEujAaGqGiJIW61Wlh3vP3DVyl2+PhgOrJh20rl6YyTRz6fnp8cnLw6eTZ6e3L37MDXY7bTzTrvV7UXu
Gm2+/vbXKufPx+OmrDgsfTGZH7vj88mzJ3d31k2aX2rnqcppc5Cu9bPjs+JsUpydrwgxT1LfFGvdjmvitKzSJAWlyioO+0a1deNcU1VPD8fHx2euicamg7WuTjLmqt3K
NfF3vnnj6pWrLOp337m1td7RHj757Mnbr112IWSpGg67ro6L+TkE54MslrOrFzacc2ne2lzvZisaT8u6cAJNEAwhsGKNalo2iGSEEMFHiYQauGlqSu2qbAhQGJwPCHpZ
BQKASE1kEATgwEKCRMQcNangowMQDwooCCqlNEEEUKgygm5moJSU0DGQMUapLIOv3hweH0wW0U/LptrKIE2rxilFhOChEVANg2DQJk2VBswJDQrNj5fpOqctK9iwBGUR
mHUA19SCFCGoLEmi+OiACBgBSaK8xNwYBCMzg2hgjWhIPAIEzQTCTEibQ3PtxijvrZmss6rqYX+9oXh2Ni3nrpPaz7+88z//y//1x788/aNv/TezSeDk4vFZXB9km734
5f3PSix63WRnvX9pZ+/x8dnO1p5uw4qXly/2/uxv/mS323NB+1B0eol3MJ6XJ8ez6Nmt/HJZPvj0+KxpPjs8/eTF6Uf7s89enO5tbPxX77/zx29cujpsG2gvpTPB5W/d
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
f6/ZuvPRT6vP/vDl4csXd+7fef/jT37/299OLw9X9h+iOjo7ud7Z3essxhenpw/e+2j/7v6z716nuB4vFgjYqVbG1xMwodzkNiE4yroj1R3MwsCNs3T3k30LLx3PRAKA
RBdKMlMxXllrOhYjjOdU75QfPHp8016vpTGzbOPsZuwxPZoOYGlcX8/S5aIUhls76y8Pr2eLZT10H76z+7d//acvX5+fD6bMtrMi1SJDYiiklFDUcjKdcs5qYSmbsVwV
wBkFnub/H1Fv8ixLlpz3uZ8p5sg5b97xzVVd1d1VRTRkEAmBRhjNuJAWWoh/qkxGMxGAaKQINHpCd9errqo3T3fMOTKmM7hzcdukTe7CMhYRJ/xz//n3BaA+i0xuBClR
sW8dakRPIZIo0VhwqRF3d/t9Expr52UpgOvO71s/yuWhtsaoprMMvrPWe7rb9b0jYAZkiUgUEIFJ8v30GIEJhAtKCJTC3gc6ESdpdGhsnipB/uB8gFSIjoElCet8bti3
fH1z8/bTXdO1mRaWPDmoGPe98yEM4qT3Ps9MZjSBvLUt3CNUJJkESOr7JlImiWPb9mDCk4uj1bb66qfPXr58t9rs2XgRRWV+rMSA/GhfXWW5/Nt/+4vVHRt9WSYGJUZS
pybyANKk4xyXdbWvu8kg17YbnAy325q6vqoOR6eL7WpNzkmDGszmbiV9cIdAkVeaWtcFzywYlWACyXjYHu7q5tyP/u0XX219O8D4l799ng+LX68+zsvB48k4Mti3bRZE
FEEipEjMaZwJIZ0PvXPq+mY1KnIdKQa93uyaQy0inY9LlJilGTB42wNKiQoBfGAZG6MRtaybXVcdoiwG0FqJk8UsBGdQZHlW7Q+oRKoSNCAktm1rezefTTw5IHC2C0II
4izPOXiJHGtjudDjlAQAEiotQShA7y0FJIkU2PlAnhhYKSBLHhgIEQAQWuucc9aaR19+3TS7vofV7WZfrbr65vLqQ3d7O4rVyYOzwdH0ZrU0FGWLL88//0qqajg5mh09
WpycZBGEfpMqk2ZmtjhLBhOd5dsfXuQ6NdPj0fmTs8VgHMu/+fo/fLzqLn98ebvcdGYa1xW/ufn0/vevf/y+WR/iSA0yKQ2goB9f/tgfdqiytFjEwwzb3pI8e3BydDwr
0th1m2rbHk1ni6PTPDl68vnD0eTk9nLl65prOz1+Io39p9/89z/9yx9vP70aJf7Js+Mv4/NX797dfFoyeRDpcDzW8RX14DkqB9NkNLg4+umjx0/fvn5zu9kczecy9BLy
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"""

frameBorderME = """
R0lGODlhDwATAKUuAJaWlpqampubm5ycnKGhoaSkpKWlpaampqenp6mpqaqqqq2tra6urrCwsLi4uL6+vsHBwcLCwsfHx8nJycvLy83Nzc/Pz9DQ0NTU1NXV1dnZ2dzc
3N3d3eDg4OPj4+jo6Ovr6+7u7u/v7/Hx8fLy8vT09PX19fb29vf39/r6+vz8/P39/f7+/v///+/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w
8e/w8e/w8e/w8e/w8SH+EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAD8ALAAAAAAPABMAAAZkwFarwxgIjsiDRSWkNECnqPQ0mihUIcNKyO22JpdKxksmISIcshc1gKTV
XJTADY/P33U5vd7S4+F+fH13goF8hnmEhwISGoImBB4OghsQLAsYLHAfAyUtKQ8ABQekpAYBCSItQQA7
"""
oid_roles = {
"B2B Center" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.6.7",
"CA Operator" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2",
"EGAIS" : "digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment",
"LocalOCSP" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.2.2.34.6, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.4,\
1.2.643.5.1.24.2.1.3, 1.2.643.5.1.24.2.2.3, 1.2.643.6.14",
"Mail Server" : "clientAuth, serverAuth, msSGC, nsSGC",
"OCSP" : "serverAuth, 1.3.6.1.5.5.7.3.9",
"RA Operator" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2",
"TSP Server" : "critical, 1.3.6.1.5.5.7.3.8",
"VPN Server" : "serverAuth",
"Web Server" : "serverAuth",
"АЭТП" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.6.3",
"Госуслуги" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.2.2.34.6, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.4,\
1.2.643.5.1.24.2.1.3, 1.2.643.6.14, 1.2.643.3.215.4, 1.2.643.3.215.5, 1.2.643.3.215.6, 1.2.643.3.215.7, 1.2.643.3.215.8, 1.2.643.3.215.9,\
1.2.643.3.215.11, 1.2.643.3.215.12, 1.2.643.3.215.13, 1.3.6.1.4.1.40870.1.1.1, 1.2.643.2.64.1.1.1, 1.2.643.3.5.10.2.12, 1.2.643.6.3.2, 1.2.643.5.1.24.2.46,\
1.2.643.6.45.1.1.1, 1.2.643.5.1.24.2.30, 1.2.643.5.1.28.2, 1.2.643.5.1.28.3, 1.2.643.3.202.1.8",
"ЕФРСФДЮЛ" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.2.2.34.6, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.4,\
1.2.643.5.1.24.2.1.3, 1.2.643.5.1.24.2.2.3, 1.2.643.6.14, 1.2.643.3.215.4, 1.2.643.3.215.5, 1.2.643.3.215.6, 1.2.643.3.215.7, 1.2.643.3.215.8,\
1.2.643.3.215.9, 1.2.643.3.215.11, 1.2.643.3.215.12, 1.2.643.3.215.13, 1.3.6.1.4.1.40870.1.1.1, 1.2.643.2.64.1.1.1, 1.2.643.3.5.10.2.12, 1.2.643.6.3.2",
"Лицензиат розницы" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.28.2, 1.2.643.5.1.28.3, 1.2.643.5.1.28.4",
"Лицензиат ФСРАР" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.28.2, 1.2.643.5.1.28.3, 1.2.643.5.1.28.4",
"МЭТС" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.3.202.1.8",
"Оператор TSA" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.2.63.3.1.1, 1.3.6.1.5.5.7.3.8",
"отчетность в ФНС" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.2.2.34.6, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.4,\
1.2.643.5.1.24.2.1.3, 1.2.643.5.1.24.2.2.3",
"Площадка Газпромбанк" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.6.17.1",
"Потребитель спирта" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.28.2, 1.2.643.5.1.28.3",
"Росреестр" : "1.3.6.1.5.5.7.3.4, 1.3.6.1.5.5.7.3.2, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.24.2.30, 1.2.643.2.2.34.6, 1.2.643.2.2.34.6,\
1.2.643.5.1.24.2.1.3.1, 1.2.643.5.1.24.2.1.3, 1.2.643.5.1.24.2.4, 1.2.643.5.1.24.2.44, 1.2.643.5.1.24.2.45, 1.2.643.5.1.24.2.5, 1.2.643.5.1.24.2.6,\
1.2.643.5.1.24.2.19, 1.2.643.5.1.24.2.20, 1.2.643.5.1.24.2.43, 1.2.643.100.2.1, 1.2.643.5.1.24.2.1.3.1",
"РосреестрРОМС" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.24.2.19, 1.2.643.100.2.1, 1.2.643.2.2.34.6",
"Росреестр ССП" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.24.2.9, 1.2.643.5.1.24.2.10, 1.2.643.5.1.24.2.11,\
1.2.643.5.1.24.2.12, 1.2.643.5.1.24.2.13, 1.2.643.5.1.24.2.14",
"Росфинмониторинг" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1",
"РУССИА ОнЛайн" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.3.202.1.8",
"СКПЭП 63 ФЗ" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2",
"СМЭВ ОГВ" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.2, 1.2.643.3.5.10.2.12",
"СМЭВРосреестрУЛОГВ" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.5.1.24.2.44, 1.2.643.5.1.24.2.45, 1.2.643.5.1.24.2.5",
"СМЭВ УЛ ОГВ" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1",
"Торговля пивом" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.5.1.28.2, 1.2.643.5.1.28.3",
"ФТС" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.3.215.4, 1.2.643.3.215.5, 1.2.643.3.215.6, 1.2.643.3.215.7, 1.2.643.3.215.8,\
1.2.643.3.215.9, 1.2.643.3.215.11, 1.2.643.3.215.12, 1.2.643.3.215.13",
"Центр Реализации" : "clientAuth, emailProtection, 1.3.6.1.4.1.311.20.2.2, 1.2.643.100.2.1, 1.2.643.2.2.34.6, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.4,\
1.2.643.5.1.24.2.1.3, 1.2.643.5.1.24.2.2.3, 1.2.643.6.14"
}

g_iso3166_codes1 = (
"Австралия","AU","Австрия","AT","Азербайджан","AZ","Аландские о-ва","AX","Албания","AL","Алжир","DZ","Американское Самоа","AS","Ангилья",
"AI","Ангола","AO","Андорра","AD","Антарктида","AQ","Антигуа и Барбуда","AG","Аргентина","AR","Армения","AM","Аруба","AW",
"Афганистан","AF","Багамские о-ва","BS","Бангладеш","BD","Барбадос","BB","Бахрейн","BH","Беларусь","BY","Белиз","BZ","Бельгия","BE","Бенин","BJ",
"Бермудские о-ва","BM","Болгария","BG","Боливия","BO","Босния и Герцеговина","BA","Ботсвана","BW","Бразилия","BR",
"Британская территория в Индийском океане","IO","Британские Виргинские о-ва","VG","Бруней Даруссалам","BN",
"Буркина Фасо","BF","Бурунди","BI","Бутан","BT","Вануату","VU","Ватикан","VA","Великобритания","GB","Венгрия","HU","Венесуэла","VE",
"Виргинские о-ва (США)","VI","Внешние малые острова (США)","UM","Внешняя Океания","QO","Восточный Тимор","TL","Вьетнам","VN",
"Габон","GA","Гаити","HT","Гайана","GY","Гамбия","GM","Гана","GH","Гваделупа","GP","Гватемала","GT","Гвинея","GN","Гвинея-Бисау","GW","Германия","DE",
"Гернси","GG","Гибралтар","GI","Гондурас","HN","Гонконг (особый район)","HK","Гренада","GD","Гренландия","GL","Греция","GR","Грузия","GE",
"Гуам","GU","Дания","DK","Демократическая Республика Конго","CD","Джерси","JE","Джибути","DJ","Диего-Гарсия","DG","Доминика","DM",
"Доминиканская Республика","DO","Европейский союз","EU","Египет","EG","Замбия","ZM","Западная Сахара","EH","Зимбабве","ZW",
"Израиль","IL","Индия","IN","Индонезия","ID","Иордания","JO","Ирак","IQ","Иран","IR","Ирландия","IE","Исландия","IS","Испания","ES","Италия","IT",
"Йемен","YE","Казахстан","KZ","Каймановы острова","KY","Камбоджа","KH","Камерун","CM","Канада","CA","Канарские о-ва","IC","Катар","QA",
"Кения","KE","Кипр","CY","Киргизия","KG","Кирибати","KI","Китай","CN","Кокосовые о-ва","CC","Колумбия","CO","Коморские о-ва","KM","Конго","CG",
"Коста-Рика","CR","Кот дИвуар","CI","Куба","CU","Кувейт","KW","Лаос","LA","Латвия","LV","Лесото","LS","Либерия","LR","Ливан","LB","Ливия","LY","Литва","LT",
"Лихтенштейн","LI","Люксембург","LU","Маврикий","MU","Мавритания","MR","Мадагаскар","MG","Майотта","YT","Макао (особый район)","MO",
"Македония","MK","Малави","MW","Малайзия","MY","Мали","ML","Мальдивские о-ва","MV","Мальта","MT","Марокко","MA","Мартиника","MQ",
"Маршалловы о-ва","MH","Мексика","MX","Мозамбик","MZ","Молдова","MD","Монако","MC","Монголия","MN","Монтсеррат","MS","Мьянма","MM","Намибия","NA",
"Науру","NR","Непал","NP","Нигер","NE","Нигерия","NG","Нидерландские Антильские о-ва","AN","Нидерланды","NL","Никарагуа","NI","Ниуе","NU",
"Новая Зеландия","NZ","Новая Каледония","NC","Норвегия","NO","ОАЭ","AE","Оман","OM","Остров Буве","BV","Остров Вознесения","AC",
"Остров Клиппертон","CP","Остров Мэн","IM","Остров Норфолк","NF","Остров Рождества","CX","Остров Святого Бартоломея","BL",
"Остров Святого Мартина","MF","Остров Святой Елены","SH","Острова Зеленого Мыса","CV","Острова Кука","CK",
"Острова Тёркс и Кайкос","TC","Острова Херд и Макдональд","HM","Пакистан","PK","Палау","PW","Палестинские территории","PS",
"Панама","PA","Папуа Новая Гвинея","PG","Парагвай","PY","Перу","PE","Питкэрн","PN","Польша","PL","Португалия","PT","Пуэрто-Рико","PR",
"Республика Корея","KR","Реюньон","RE","Российская Федерация","RU","Руанда","RW","Румыния","RO","Сальвадор","SV","Самоа","WS","Сан-Марино","SM",
"Сан-Томе и Принсипи","ST","Саудовская Аравия","SA","Свазиленд","SZ","Свальбард и Ян-Майен","SJ","Северная Корея","KP",
"Северные Марианские о-ва","MP","Сейшельские о-ва","SC","Сен-Пьер и Микелон","PM","Сенегал","SN","Сент-Винсент и Гренадины",
"VC","Сент-Киттс и Невис","KN","Сент-Люсия","LC","Сербия","RS","Сербия и Черногория","CS","Сеута","и","Мелилья","EA","Сингапур","SG",
"Сирия","SY","Словакия","SK","Словения","SI","Соломоновы о-ва","SB","Сомали","SO","Судан","SD","Суринам","SR","США","US","Сьерра-Леоне","SL",
"Таджикистан","TJ","Таиланд","TH","Тайвань","TW","Танзания","TZ","Того","TG","Токелау","TK","Тонга","TO","Тринидад и Тобаго","TT",
"Тристан-да-Кунья","TA","Тувалу","TV","Тунис","TN","Туркменистан","TM","Турция","TR","Уганда","UG","Узбекистан","UZ","Украина","UA",
"Уоллис и Футуна","WF","Уругвай","UY","Фарерские о-ва","FO","Федеративные Штаты Микронезии","FM","Фиджи","FJ","Филиппины","PH",
"Финляндия","FI","Фолклендские о-ва","FK","Франция","FR","Французская Гвиана","GF","Французская Полинезия","PF",
"Французские Южные Территории","TF","Хорватия","HR","ЦАР","CF","Чад","TD","Черногория","ME","Чехия","CZ","Чили","CL","Швейцария","CH","Швеция",
"SE","Шри-Ланка","LK","Эквадор","EC","Экваториальная Гвинея","GQ","Эритрея","ER","Эстония","EE","Эфиопия","ET","ЮАР","ZA",
"Южная Джорджия и Южные Сандвичевы Острова","GS","Ямайка","JM","Япония","JP"
)



def set_Tk_var():
    global g_iso3166_codes
    global varDB
    varDB = StringVar()
    global varBut
    varBut = StringVar()
    global lastBut
    lastBut = StringVar()
    global addMod
    addMod = StringVar()
    addMod.set('1')
    global listModule
    listModule = StringVar()
    global typeSign
    typeSign = StringVar()
    global typeEject
    typeEject = StringVar()
    global typeImport
    typeImport = StringVar()
    global typeExport
    typeExport = StringVar()
    global catch56
    catch56 = StringVar()
    global catch57
    catch57 = StringVar()
    global catch58
    catch58 = StringVar()

    global tch49
###
    tch49 = [1,1,1,1,0,0,0,0]
    tch49[0] = StringVar()
    tch49[1] = StringVar()
    tch49[2] = StringVar()
    tch49[3] = StringVar()
    tch49[4] = StringVar()
    tch49[5] = StringVar()
    tch49[6] = StringVar()
    tch49[7] = StringVar()
    global listkey
    listkey = 'digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,certSigning,crlSigning,critical'
    global country_inv
    country_inv = {}
    for j in range(0, len(g_iso3166_codes1) - 1, 2) :
#	    print (g_iso3166_codes[j+1] + '=' + g_iso3166_codes[j])
        country_inv[g_iso3166_codes1[j]] = str(g_iso3166_codes1[j+1])


readpw = ''
readpwok = 1


def caption(e, w):
    global readpw
    global readpwok
    readpw = e.get()
    readpwok = 1
    w.destroy()
#Разблокируем главное окно
    root.tk.call('tk', 'busy', 'forget', root)

def cancelPwd(w):
    global readpw
    global readpwok
    readpw = ''
    readpwok = 0
    w.destroy()
#Разблокируем главное окно
    root.tk.call('tk', 'busy', 'forget', root)

def rect2window (w, tw, th):
#Считываем размеры главного окна в пикселях
    rw = w.winfo_width()
    rh = w.winfo_height()
    geometr = str(tw) + 'x' + str(th)
    rgeom = w.geometry()
#    print("GEOMETRroot=" + str(rgeom))
    if ((rw + rh) <= rh):
        geometrn = geometr +  "+0+0"
    else:
#Координаты главного окна
        rgeom = w.geometry()
        rgf = rgeom.find("x")
        rw = rgeom[ 0 : rgf]
        rg = rgeom.find("+")
        xx = rgeom[rgf+1 : rg]
        rg1 = rgeom[rg+1 : ]
#        print("RW=" + rw + ";" + "TW=" + str(th))
#        print("XX=" + xx + ";" + "RG1=" + rg1)
        if (int(rw) <= tw):
            geometr = geometr +  '+' + rg1
        else:
            off = (int(rw) - tw) // 2
            rg2 = rg1.find("+")
            rg = rg + 1
            rg2 = rg2 
            offw = rg1[ 0 : rg2]
            offw1 = int(offw) + off
            rg2 = rg2 + 1
            offw2 = rg1[rg2 : ]
            offw2 = int(offw2) + (int(xx) - th)//2
            geometr = geometr + "+" + str(offw1) + "+" + str(offw2)
#Возвращаем геометрию дляцентрируемого окна
    return geometr

def password(w, token, tpw):
    global img_p11
#    top=Toplevel(root, bg="#eff0f1", padx=2, pady=2, width=600, height=350, highlightbackground="#39b5da", highlightthickness='3')
    w = Toplevel(root, background='#eff0f1', relief=FLAT, bd=0,pady=4, highlightcolor="red", highlightbackground="chocolate", highlightthickness='3')
    w.tk.call('wm', 'iconphoto', w._w, img_p11)
    if (tpw == 0):
        w.title("Введите PIN-код для Токена")
    else:
        w.title("Введите пароль для контейнера PKCS#12")
    w.geometry("+400+260")
#Окно не может перекрываться (yes)
    w.attributes('-topmost', 'yes')
#Центрируем справочное окно в основном окне
#    set geometr [rect2window "." "530" "480" ]
#    wm geometry $w $geometr
    geometr = rect2window( root, 410, 90)
#    print("GEOMETR=" + str(geometr))
    w.geometry(geometr)

    fra = Frame(w, background='#eff0f1', relief='flat')
    fra.pack(pady=3, fill='x', expand=1, side='top', padx='1mm')
    lab = Label(fra, text=token, bg='#eff0f1')
    ent = ttk.Entry(fra, show='*')
    sep = Frame(w, width=400, background='#eff0f1',
                relief='groove', bd=4, height=4)
    but = ttk.Button(w, text='Отмена', command=(lambda e=w: cancelPwd(e)))
    lab.pack(padx=5, pady=3, side='left')
    ent.pack(padx=0, pady=3, side='right', fill='x', expand=1)
    sep.pack(pady=1, fill='x', expand=1, side='top')
    but.pack(padx='1mm', pady=3, side='right')
    ent.bind('<Return>', (lambda event, e=ent: caption(e, w)))
    ent.focus_set()
#Блокируем фрейм
#    w.grab_set()
    root.tk.call('tk', 'busy', 'hold', root)
    w.wait_window()
    root.update()

def changeLabel(newent, certnick, tokname, w):
    global patch_win
    newnick = newent.get()
    if sys.platform != "win32":
        cmd_rename = '"' + patch_win + 'certutil" --rename -d "' + NSSname + '" -n "' + certnick + '"  --new-n "' + newnick + '"'
        id = pexpect.spawn(cmd_rename)
    else:
        home = os.environ["USERPROFILE"]
        certnick_utf8 = certnick.encode('cp1251').decode('cp1251')
        newnick_utf8 = newnick.encode('cp1251').decode('cp1251')
        cmd_rename = '"' + patch_win + 'certutil" --rename -d "' + NSSname + '" -n "' + certnick_utf8 + '"  --new-n "' + newnick_utf8 + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_rename, timeout=1)

    w.destroy()
    while(True):
        ret = id.expect(["Enter Password or Pin",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            root.update()
            if (ret == 0):
                password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12)
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return 

################
    if sys.platform != "win32":
        res = str(id.before)
        id.close()
        err = id.exitstatus
    else:
        res = id.before.decode('UTF-8')
        err = 0
        if (res.find('not find certificate') != -1):
            err = 255
    if (err == 255):
        tkMessageBox.showerror(title="Смена метки", message='Не удалось сменить метку\n' + certnick + '\nна \n' + newnick)
        return
    tkMessageBox.showinfo(title="Смена метки", message='Метка\n' + certnick + '\nзаменена на метку\n' + newnick)


def cannotEnter(i, S):
#Ввод запрещен
    return False


def rename(frameManager):
    global img_p11
    font9 = "-family sans-serif -size 10 -weight bold -slant "  \
        "roman -underline 0 -overstrike 0"
    tokname = frameManager.STCombobox1.get()
    certnick = frameManager.STCombobox2.get()
    ftok = tokname + ':'
    lftok = len(ftok)
    fnick = certnick
    if (certnick[0: lftok] == ftok):
        fnick = certnick[lftok:]
    vcmdEnter = (root.register(cannotEnter), '%i', '%S')

    w = Toplevel(root, relief='flat', bd=0, background='#eff0f1', pady=4, highlightcolor="skyblue", highlightbackground="blue", highlightthickness='3')
    w.tk.call('wm', 'iconphoto', w._w, img_p11)
    w.title("Замена метки (CKA_LABEL)")
#Центрируем справочное окно в основном окне
    geometr = rect2window( root, 500, 160)
#    print("GEOMETR=" + str(geometr))
    w.geometry(geometr)
#Окно не может перекрываться (yes)
    w.attributes('-topmost', 'yes')
    fra = Frame(w, background='#eff0f1', relief='flat')
    fra.lab = Label(fra, text="Токен:", bg='white')
    fra.ent = ttk.Entry(fra)
    fra1 = Frame(w, background='#eff0f1', relief='flat')
    fra1.lab = Label(fra1, text="Текущая Метка:", bg='white')
    fra1.ent = Entry(fra1, width=80,bg='snow',font=font9, disabledbackground='snow')
    fra2 = Frame(w, background='#eff0f1', relief='flat')
    fra2.lab = Label(fra2, text="Новая Метка:", bg='white',font=font9)
    fra2.ent = ttk.Entry(fra2)

    sep = Frame(w, width=120, background='skyblue',
                relief='groove', bd=0, height=4)
    but = ttk.Button(w, text='Отмена', command=(lambda e=w: cancelPwd(e)))
    butok = ttk.Button(w, text='Сменить', command=(lambda e=fra2.ent: changeLabel(e, certnick, tokname, w)))
    fra.pack(pady=3, fill='x', expand=1, side='top', padx='1mm')
    fra.lab.pack(padx='1mm', pady=3, side='left')
    fra.ent.pack(padx='0 1mm', pady=3, side='right', fill='x', expand=1)
    fra.ent.delete(0,END)
    fra.ent.insert(END, tokname)
    fra.ent.configure(validate="key", validatecommand=vcmdEnter)
    fra1.pack(pady=0, fill='x', expand=1, side='top', padx='1mm')
    fra1.lab.pack(padx='1mm', pady=3, side='left')
    fra1.ent.pack(padx='1mm 0', pady=3, side='right', fill='x', expand=1)
    fra1.ent.delete(0,END)
    fra1.ent.insert(END, certnick)
    fra1.ent.configure(validate="key", validatecommand=vcmdEnter)
    fra2.pack(pady=3, fill='x', expand=1, side='top', padx='1mm')
    fra2.lab.pack(padx='1mm', pady=3, side='left')
    fra2.ent.pack(padx='0 0', pady=3, side='right', fill='x', expand=1)
    fra2.ent.delete(0,END)
    fra2.ent.insert(END, fnick)

    sep.pack(pady=1, fill='x', expand=1, side='top')
    but.pack(padx=5, pady=3, side='right')
    butok.pack(padx=5, pady=3, side='right')
    fra2.ent.focus_set()
    w.grab_set()
    w.wait_window()
    root.update()

def delMod():
    global patch_win
    sys.stdout.flush()
    global NSSname
    mod_for_del = self1.HTCombobox1.get()
    lib_for_del = self1.HEntry3.get()
    if mod_for_del == '':
        return
    cmd_delmod = 'modutil -delete ' + mod_for_del + ' -dbdir "' + NSSname + '"'
    if sys.platform != "win32":
        id = pexpect.spawn(cmd_delmod)
    else:
        cmd_delmod = '"' + patch_win + 'modutil" -delete "' + mod_for_del + '" -dbdir "' + NSSname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_delmod, timeout=1)

##############################
    while(True):
        ret = id.expect(["to continue:", pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline("")
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

########################################
    res = id.before
    if sys.platform != "win32":
        id.close()
    tkMessageBox.showinfo(title="Отключение модуля", message='Модуль ' +
                          mod_for_del + '\nс библиотекой \n' + lib_for_del + '\nотключен')
    listMod()
    selectMod(0)

def chooseCertOrCSR (w, type):
    global filename
    filename1 = ''
    if not filename:
        if sys.platform != "win32":
            home = os.environ["HOME"]
        else:
            home = os.environ["USERPROFILE"]
    else :
        home = os.path.dirname(filename)
    if (type == 0):
        filename1 = tkFileDialog.askopenfilename(initialdir = home, parent=root, title='Выбор файла с запросом',
                filetypes=[('Файл с запросом p10', '.p10'), ('Файл с запросом der', '.der'),
                ('Файл с запросом csr', '.csr'), ('Файл с запросом pem', '.pem'), ('Любой файл с запросом', '*')])
        if (filename1 == () or filename1 == ''):
            return ('', '')
        file_b, f_e = os.path.splitext(filename1)
        if ( f_e == '.pem' or f_e == '.csr'):
            loadf = ' -a -i "' + filename1 + '"'
        else:
            loadf = ' -i "' + filename1 + '"'
        filename = filename1
        return ("", loadf)
######################
    filename1 = w.SEntry1.get()

    if (filename1 == () or filename1 == ''): # Если имя файла было задано пользователем
        tkMessageBox.showinfo(title="Импорт сертификата", message='Файл с сертификатом не выбран!\n')
        return ('', '')
    filename = filename1
    cert_tek = fsb795.Certificate(filename1)

    if (cert_tek.pyver == ''):
        tkMessageBox.showinfo(title="Выбор сертификата", message='Выбранный файл ' + '\n' + filename + '\nне содержит сертификата')
        return ('', '')

    info_subject, vlad_sub = cert_tek.subjectCert()
    info_issuer, vlad_is = cert_tek.issuerCert() 
    if sys.platform != "win32":
        nickcert = str(info_subject['CN']) + ' from ' + str(info_issuer['CN'])
    else:
        nickcert = str(info_subject['CN'] + ' from ' + info_issuer['CN'])
    if (cert_tek.formatCert == 'PEM'):
        loadf = ' -a -i "' + filename + '"'
    else:
        loadf = ' -i "' + filename + '"'
    return (nickcert, loadf)

def exportCert(frameManager, w):
    global patch_win
    tokname = frameManager.STCombobox1.get()
    certnick = frameManager.STCombobox2.get()
    texport = typeExport.get()
    ftok = tokname + ':'
    lftok = len(ftok)
    fnick = certnick
    if (certnick[0: lftok] == ftok):
        fnick = certnick[lftok:]
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]
    dir_file = ''
    dir_file = tkFileDialog.askdirectory(initialdir=home, title='Выбор каталога для сертификата')
#Блокируем фрейм
    w.tk.call('tk', 'busy', 'hold', frameManager.Labelframe2)
    if (dir_file == ''):
        return

#    if sys.platform != "win32":
#        dir_file = dir_file.encode("UTF-8")
#    else:
#        dir_file = dir_file.encode("CP1251")
    if not os.path.exists(dir_file):
        os.makedirs(dir_file)
    dfnick = os.path.join(dir_file, fnick)


    f_exp = ''
    if (texport == '0'):
        fout = ' -a -o "' + dfnick + '.pem"'
        f_exp = dfnick + '.pem'
        if (sys.platform == "win32"):
            fout_ext = ' -a -o "' + dfnick.encode('cp1251').decode('cp1251') + '.pem'
    elif (texport == '1'):
        fout = ' -r -o "' + dfnick + '.der"'
        f_exp = dfnick + '.der'
        if (sys.platform == "win32"):
            foot_exp = ' -r -o "' + dfnick.encode('cp1251').decode('cp1251') + '.der'
    if sys.platform != "win32":
        cmd_export = '"' + patch_win + 'certutil" -L -d "' + NSSname + '" -n "' + certnick + '" ' + fout
        id = pexpect.spawn(cmd_export)
    else:
        certnick_utf8 = certnick.encode('cp1251').decode('cp1251')
        cmd_export = '"' + patch_win + 'certutil" -L -d "' + NSSname + '" -n "' + certnick_utf8 +'"' + fout_ext
        id = pexpect.popen_spawn.PopenSpawn(cmd_export, timeout=1)

    while(True):
        ret = id.expect(["Enter Password or Pin",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            root.update()
            if (ret == 0):
                password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12)
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            lseek = 1
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return 

################
    if sys.platform != "win32":
        id.close()
    err = 0
    if not os.path.exists(f_exp):
        err = 1
    else:
        if os.path.getsize(f_exp) == 0:
            err = 1

    if (err == 1):
        tkMessageBox.showerror(title="Экспорт сертификата", message='Не удалось экспортировать сертификат\n' + certnick + '\nс токена\n' + tokname)
        return
    tkMessageBox.showinfo(title="Экспорт сертификата сертификата", message='Сертификат\n' + certnick + '\nэкспортирован в файл\n' + dfnick)


def importP12(frameManager):
    global patch_win
    global readpw
    global filename
    if not filename:
        if sys.platform != "win32":
            home = os.environ["HOME"]
        else:
            home = os.environ["USERPROFILE"]
    else :
        home = os.path.dirname(filename)
#    fp12 = ''
#    fp12 = tkFileDialog.askopenfilename(initialdir = home, parent=root, title='Выбор контейнера PKCS#12',
#                filetypes=[('Контейнер PKCS#12', '.p12'), ('Контейнер PKCS#12', '.pfx'), ('Любой файл с сертификатом', '.*')])

    tokname = frameManager.STCombobox1.get()
    fp12 = frameManager.SEntry1.get()

    if (fp12 == () or fp12 == ''):
        tkMessageBox.showinfo(title="Импорт контейнера PKCS#12", message='Контейнер не выбран\n')
        return (-1, "", "")
    filename = fp12

    if sys.platform != "win32":
        cmd_import_p12 = '"' + patch_win + 'pk12util" -i "' + fp12 + '" -h "' + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.spawn(cmd_import_p12, timeout=1)
    else:
        cmd_import_p12 = '"' + patch_win + 'pk12util" -i "' + fp12 + '" -h "'  + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_import_p12, timeout=10)
    while(True):
        ret = id.expect(["Enter Password or Pin", "Enter password for PKCS12 file",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0 or ret == 1):
            root.update()
            if (ret == 0):
                password('', tokname, 0)
                pasP11 = readpw
            else:
                password('', os.path.basename(fp12), 1)
                pasP12 = readpw
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12, "")
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            lseek = 1
        elif (ret == 2):
            break
        elif (ret == 3):
            break
            if sys.platform != "win32":
                id.close()
            return (-1, fp12, "")

    if sys.platform != "win32":
        res = id.before.decode('UTF-8')
#        res = str(id.before)
        id.close()
    else:
        res = id.before.decode('UTF-8')
    if (res.find("PKCS12 IMPORT SUCCESSFUL") != -1):
        ret = 0
    elif (res.find("SEC_ERROR_BAD_PASSWORD") != -1):
        ret = -1
        return (ret, fp12, "")
    else:
        ret = -2
    print('res pk12util -i =' + res)
#        return (ret, fp12, res)
#Устаналваем доверие к корневому сертификату из P12
    if sys.platform != "win32":
        cmd_import_p12 = '"' + patch_win + 'pk12util" -l "' + fp12 + '" -h "' + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.spawn(cmd_import_p12, timeout=1)
    else:
        cmd_import_p12 = '"' + patch_win + 'pk12util" -l "' + fp12 + '" -h "'  + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_import_p12, timeout=1)
    while(True):
        ret = id.expect(["Enter Password or Pin", "Enter password for PKCS12 file",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0 or ret == 1):
            root.update()
            if (ret == 0):
                readpw = pasP11
            else:
                readpw = pasP12
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12, "")
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            lseek = 1
        elif (ret == 2):
            break
        elif (ret == 3):
            break
            if sys.platform != "win32":
                id.close()
            return (-1, fp12, "")
###################

    if sys.platform != "win32":
        res = id.before.decode('UTF-8')
        id.close()
    else:
        res = id.before.decode('UTF-8')
#    print (res)
    print('res pk12util -l =' + res)
    ss = id.before.decode('utf-8', errors='slashescape').split('\n')
    certca = 0
    frname = "-1"
    j = 0
    for s1 in ss:
        if (j == 0):
            j = 1
            continue
        s = s1.replace("\r", "")
        if (certca == 0):
            inds = s.find('Certificate:')
            if (inds != -1):
                certca = 1
            continue
        inds = s.find('Friendly Name:')
        if (inds == -1):
            continue
        frname = s[inds + 15:]
        break
    print('FRNAME="' + frname + '"')
    if (certca == 0):
        return (ret, fp12, "")
    dov = ' -t '
    check1  =  catch56.get()
    if (check1 == '1'):
        dov = dov + '"CT,'
    else:
        dov = dov + ','
    check2  = catch57.get()
    if (check2 == '1'):
        dov = dov + 'C,'
    else:
        dov = dov + ','
    check3  =  catch58.get()
    if (check3 == '1'):
        dov = dov + 'C"'

    print('Change Doverie') 
    certnick = frname
    print('Change Doverie=' + certnick) 
    if sys.platform != "win32":
        cmd_change = '"' + patch_win + 'certutil" -M ' + '-d "' + NSSname + '" ' + ' -h ' + 'internal' + \
            ' -n ' + '"' + certnick.encode('utf-8').decode('utf-8') + '" ' + dov
    else:
        home = os.environ["USERPROFILE"]
#############################
        cmd_utf8 = '"' + patch_win + 'certutil" -M -d "' + NSSname + '" -h ' + 'internal' + \
            ' -n "' + certnick.encode('cp1251').decode('cp1251') +'" ' + dov
        cmd_change = 'chcp 1251 & ' +  cmd_utf8
####################################
    print('Change=' + cmd_change) 
    ret = os.system(cmd_change)

    return (ret, fp12, "")

def viewP12(w):
    global patch_win
    global readpw
    font9 = "-family courier -size -12 -weight normal -slant "  \
        "roman -underline 0 -overstrike 0"

    tokname = w.STCombobox1.get()
    fp12 = w.SEntry1.get()
#   print ('tokname=' + tokname)
#   print ('fp12=' + '"' + fp12 + '"')
    if (fp12 == () or fp12 == ''):
        tkMessageBox.showinfo(title="Импорт контейнера PKCS#12", message='Фвйл с контейнером PKCS#12 не выбран!\n')
        return (-1)
    filename = fp12
#Просмотр сертификатов из PKCS12
    if sys.platform != "win32":
        cmd_import_p12 = '"' + patch_win + 'pk12util" -l "' + fp12 + '" -h "' + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.spawn(cmd_import_p12, timeout=1)
    else:
        cmd_import_p12 = '"' + patch_win + 'pk12util" -l "' + fp12 + '" -h "'  + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_import_p12, timeout=1)
    while(True):
        ret = id.expect(["Enter Password or Pin", "Enter password for PKCS12 file",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0 or ret == 1):
            root.update()
            if (ret == 0):
                password('', tokname, 0)
                pasP11 = readpw
            else:
                password('', os.path.basename(fp12), 1)
                pasP12 = readpw
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12)
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            lseek = 1
        elif (ret == 2):
            break
        elif (ret == 3):
            break
            if sys.platform != "win32":
                id.close()
            return (-1, fp12)
###################

    if sys.platform != "win32":
        res = id.before.decode('UTF-8')
        id.close()
    else:
        res = id.before.decode('UTF-8')
#    print (res)
    top=Toplevel(root, bg="#eff0f1", padx=2, pady=2, width=600, height=350, highlightbackground="#39b5da", highlightthickness='3')

    top.tk.call('wm', 'iconphoto', top._w, img_p11)
    top.title("Просмотр контейнера PKCS#12")
#Центрируем справочное окно в основном окне
    geometr = rect2window( root, 600, 350)
#    print("GEOMETR=" + str(geometr))
    top.geometry(geometr)
#    top.geometry("600x350+300+150")
#Окно не может перекрываться (yes)
    top.attributes('-topmost', 'yes')

    fra = Frame (top)
    txt = Text(fra, bg="white", bd=0, font=font9, height=14,width=10, wrap=NONE)
    hsb = ttk.Scrollbar(fra, orient='horizontal', command=txt.xview)
    vsb = ttk.Scrollbar(fra, orient='vertical', command=txt.yview)
    txt['yscrollcommand'] = vsb.set
    txt['xscrollcommand'] = hsb.set

    vsb.grid(row=0, column=1, sticky='ns')
    hsb.grid(row=1, column=0, sticky='we')
    txt.grid(row=0, column=0, sticky='nwse')
    fra.grid_columnconfigure(0, weight=1)
    fra.grid_rowconfigure(0, weight=1)
    
    fra.pack(side='top', fill='both', expand=1)
    but = ttk.Button(top, text='Насмотрелся', command=(lambda e=top: cancelPwd(e)))
    but.pack(side='right', pady=5, padx='1mm')
    txt.delete("1.0", END)
#######################################
    txt.configure(font="courier 9 ")
    fnt_std = txt.cget('font')
    fnt_l = fnt_std.split(' ')
    fnt_bold = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'bold'
    fnt_italic = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'italic'
    txt.tag_configure('bold', font=fnt_bold)
    txt.tag_configure('italic', font=fnt_italic)
#    ss = stdout.decode('utf-8', errors='slashescape').split('\n')
    ss = id.before.decode('utf-8', errors='slashescape').split('\n')
#    ss = res.split('\n')
    j = 0;
    for s1 in ss:
        if (j == 0):
            j = 1
            continue
        s1 = s1.replace("\r", "")
        s = s1 + '\n'
        if not s:
            break
        inds = s.find(': ')
        if (inds != -1):
            its = txt.index('insert')
            txt.insert (END,  s[0:inds + 1])
            ite = txt.index('insert')
            txt.tag_add('bold', its, ite)
            txt.insert (END,  s[inds + 1:])
        else:
            if sys.platform != "win32":
                inds = s.find(':\n')
            else:
                inds = s.find(':\r')
            if (inds == -1):
                txt.insert (END, s)
                continue
            inds1 = s.find(':')
            if (inds1 != inds):
                txt.insert (END, s)
                continue
            its = txt.index('insert')
            txt.insert (END,  s[0:inds + 1])
            ite = txt.index('insert')
            txt.tag_add('bold', its, ite)
            txt.insert (END,  s[inds + 1:])
    txt.configure(state='disabled')
#Блокируем фрейм
#    top.grab_set()
    root.tk.call('tk', 'busy', 'hold', root)
    top.wait_window()

    return (ret, fp12)

def exportP12(frameManager):
    global patch_win
    global filename
    tokname = frameManager.STCombobox1.get()
    certnick = frameManager.STCombobox2.get()
    ftok = tokname + ':'
    lftok = len(ftok)
    fnick = certnick
    if (certnick[0: lftok] == ftok):
        fnick = certnick[lftok:]
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        ind_i = certnick.find("И")
        home = os.environ["USERPROFILE"]
    dir_file = ''
    dir_file = tkFileDialog.askdirectory(initialdir=home, title='Выбор каталога для контейнера PKCS#12')
    if (dir_file == ''):
        return

#    if sys.platform != "win32":
#        dir_file = dir_file.encode("UTF-8")
#    else:
#        dir_file = dir_file.encode("CP1251")
    if not os.path.exists(dir_file):
        os.makedirs(dir_file)
    dfnick = os.path.join(dir_file, fnick)
    fp12 = dfnick + '.p12'
    
    fout = ' -o "' + dfnick + '.p12"'
    fout_exp = ' -o "' + dfnick.encode('cp1251').decode('cp1251') + '.p12"'
    if sys.platform != "win32":
        cmd_export_p12 = '"' + patch_win + 'pk12util" ' + fout + ' -n "' + certnick  + '"  -h "' + tokname + '"  -d "' + NSSname + '"'
        id = pexpect.spawn(cmd_export_p12)
    else:
        certnick_utf8 = certnick.encode('utf-8').decode('utf-8', errors='replace')
        if (ind_i == -1):
            cmd_export_p12 = '"' + patch_win + 'pk12util" ' + ' -n "' + certnick.encode('utf-8').decode('cp1251')  + '"  -h "' + tokname + '"  -d "' + NSSname + '"' + fout
        cmd_p12_utf8 = '"' + patch_win + 'pk12util" ' + ' -n "' + certnick_utf8 + '" -h "' + tokname + '" -d "' + NSSname + '"'
# + fout
        if (ind_i != -1):
    	    cmd_export_p12 = cmd_p12_utf8.encode('cp1251').decode('cp1251') + fout_exp

        id = pexpect.popen_spawn.PopenSpawn(cmd_export_p12, timeout=10)
    while(True):
        ret = id.expect(["Enter Password or Pin", "Enter password for PKCS12 file", "Re-enter password",pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0 or ret == 1 or ret == 2):
            root.update()
            if (ret == 0):
                password('', tokname, 0)
            elif (ret == 1):
#                password('', 'Enter Password for PKCS12 file:')
                password('', os.path.basename(fp12), 1)
            elif (ret == 2):
                password('', "Повторите пароль для PKCS#12:", 1)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return (-3, fp12)
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 3):
            break
        elif (ret == 4):
            if sys.platform != "win32":
                id.close()
            return

    if sys.platform != "win32":
        res = str(id.before)
        id.close()
    else:
        res = id.before.decode('UTF-8')
    if (res.find("PKCS12 EXPORT SUCCESSFUL") != -1):
        tkMessageBox.showinfo(title="Экспорт контейнера PKCS#12", message='Сертификат \n' + certnick  + '\nэкспортирован в файл\n' + fp12)
    else:
        tkMessageBox.showerror(title="Экспорт контейнера PKCS#12", message='Сертификат\n' + certnick + '\nэкспортировать не удалось')
    return 

def viewCertOrCSR(framemanager, type):
    global patch_win
    rb = typeImport.get()
    if(rb == '2' and type != 0):
        viewP12(framemanager)
        print('viewP12')
        return
    if(type == 1):
#Просмотр сертификата
        certnick, file_form = chooseCertOrCSR(framemanager, 1)
        if (certnick == ''):
            return
        cmd_view_cert = '"' + patch_win + 'pp" -t c -u ' + file_form
    else:
#Просмотр запроса
        certnick, file_form = chooseCertOrCSR(framemanager, 0)
        if (file_form == ''):
            return
        cmd_view_cert = '"' + patch_win + 'pp" -t cr -u ' + file_form
    view_pp(cmd_view_cert, '')

def importCert(frameManager):
    global patch_win
    tokname = frameManager.STCombobox1.get()
    rb = typeImport.get()
    if(rb == '2'):
#Импорт PKCS12
        ret, certnick, res = importP12(frameManager)
        if (ret == 0):
            if(py3 == True):
                tkMessageBox.showinfo(title="Импорт контейнера PKCS#12", message='Контейнер  \n' + certnick  + '\nимпортирован на токен\n' + tokname)
            else:
                tkMessageBox.showinfo(title="Импорт контейнера PKCS#12".decode('utf-8'), message='Контейнер \n'.decode('utf-8') + certnick  + '\nимпортирован на токен\n'.decode('utf-8') + tokname)
        elif (ret == -1):
            tkMessageBox.showerror(title="Импорт контейнера PKCS#12", message='Контейнер\n' + certnick + '\nимпортировать на токен\n' + tokname + '\nне удалось. Плохой пароль')
        elif (ret == -2):
            tkMessageBox.showerror(title="Импорт контейнера PKCS#12", message='Контейнер\n' + certnick + '\nимпортировать на токен\n' + tokname + '\nне удалось', detail=res)
        return

#Импорт Сертификата
    certnick, file_form = chooseCertOrCSR(frameManager, 1)

    if (certnick == ''):
        return
    dov = ' -t '
    if (rb == '1'):
        check1  =  catch56.get()
        if (check1 == '1'):
            dov = dov + '"CT,'
        else:
            dov = dov + ','
        check2  = catch57.get()
        if (check2 == '1'):
            dov = dov + 'C,'
        else:
            dov = dov + ','
        check3  =  catch58.get()
        if (check3 == '1'):
            dov = dov + 'C"'
    else:
#        dov = dov + ' u'
        dov = dov + '",,"'
    if sys.platform != "win32":
        cmd_import = '"' + patch_win + 'certutil" -A ' + '-d "' + NSSname + '" ' + file_form +  ' -h "' + tokname + '" -n "' + certnick + '"' + dov
        id = pexpect.spawn(cmd_import)
    else:
#############################
#Что-то не срабатывает
        certnick_utf8 = certnick.encode('cp1251').decode('cp1251', errors='replace')
        cmd_utf8 = '"' + patch_win + 'certutil" -A -d "' + NSSname + '" -n "' + certnick_utf8 +'" ' + dov
        cmd_import = cmd_utf8 + file_form.encode('cp1251').decode('cp1251') +  ' -h ' + '"' + tokname + '"' 
        id = pexpect.popen_spawn.PopenSpawn(cmd_import, timeout=1)
####################################
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    print('cmd_import=' + cmd_import)
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        print('cmd_import ret=' + str(ret))
        if (ret == 0):
            tname = str(id.after)[29:-3]
            password('', tname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 1):
            if sys.platform != "win32":
                id.close()
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

    res = id.before.decode('UTF-8')
    if (res == ""):
        ret = 0
    else:
        if (res.find('could not change trust on certificate') != -1):
            ret = 0
    if ret != 0:
        tkMessageBox.showerror(title="Импорт сертификата", message='Сертификат\n' + certnick + '\nимпортировать на токен\n' + tokname + '\nне удалось', detail=res)
        return
    if (tokname != 'NSS Certificate DB'):
        cmd_del = '"' + patch_win + 'certutil" -D ' + '-d "' + NSSname + '" -h "NSS Certificate DB" -n "' + certnick + '"'
#        print ('certimport cmd_del=' + cmd_del)
        ret = os.system(cmd_del)

    tkMessageBox.showinfo(title="Импорт сертификата", message='Сертификат \n' + certnick  + '\nимпортирован на токен\n' + tokname, detail=res)
    return

def deleteCert(frameManager):
    global patch_win
    global NSSname
    tokname = frameManager.STCombobox1.get()
    certnick = frameManager.STCombobox2.get()
    if (certnick == ''):
        return
    if sys.platform == "win32":
        certnick_utf8 = certnick.encode('utf-8').decode('utf-8', errors='replace')
        certnick = certnick.encode('cp1251').decode('cp1251', errors='replace')

    err = 0
    answer = tkMessageBox.askyesno(title='Удаление сертификата', message='Закрытый ключ при наличии удалять?')
    cmd_del = ''
#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    if(answer == True):
#Удаление сертификата и ключевой пары
        if sys.platform != "win32":
#            cmd_del = '"' + patch_win + 'certutil" -F ' + '-d "' + NSSname + '" -h "' + tokname + '" -n ' + '"' + certnick + '"'
            cmd_del = '"' + patch_win + 'certutil" -F ' + '-d "' + NSSname + '" -n ' + '"' + certnick + '"'
            id = pexpect.spawn(cmd_del)
        else:
            cmd_del = '"' + patch_win + 'certutil" -F ' + '-d "' + NSSname + '" -h "' + tokname + '" -n ' + '"' + certnick + '"'
            id = pexpect.popen_spawn.PopenSpawn(cmd_del, timeout=1)

        while(True):
            ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
            if (ret == 0):
                tname = str(id.after)[29:-3]
                password('', tname, 0)
#                password('', tokname, 0)
                if (readpwok == 0):
                    if sys.platform != "win32":
                        id.close()
                    return
                if sys.platform != "win32":
                    id.send(readpw)
                    id.send("\r")
                else:
                    id.sendline(readpw)
            elif (ret == 1):
                if sys.platform != "win32":
                    id.close()
                break
            elif (ret == 2):
                if sys.platform != "win32":
                    id.close()
                return
#        if (err == 1):
#            tkMessageBox.showerror(title="Удаление сертификата", message='Сертификат "' + certnick + '"\n' + 'не был удален с токена ' + tokname)
#            return
#        tkMessageBox.showinfo(title="Удаление сертификата", message='Сертификат "' + certnick + '"\n' + 'и ключевая пары удалены с токена ' + tokname)
#        return
#Удаление сертификата
###########
    if sys.platform != "win32":
        cmd_del = '"' + patch_win + 'certutil" -D ' + '-d "' + NSSname + '" -h "' + tokname + '" -n ' + '"' + certnick + '"'
        id = pexpect.spawn(cmd_del)
    else:
        cmd_del = '"' + patch_win + 'certutil" -D ' + '-d "' + NSSname + '" -h "' + tokname + '" -n ' + '"' + certnick + '"'
        home = os.environ["USERPROFILE"]

        id = pexpect.popen_spawn.PopenSpawn(cmd_del, timeout=10)
    print('cmd_del=' + cmd_del)

    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            if(answer != True):
                tname = str(id.after)[29:-3]
                password('', tname, 0)
#                password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 1):
            if sys.platform != "win32":
                id.close()
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return
##########
    if (err == 1):
        tkMessageBox.showerror(title="Удаление сертификата", message='Сертификат "' + certnick + '"\n' + 'не был удален с токена ' + tokname)
        return
    if(answer == True):
        tkMessageBox.showinfo(title="Удаление сертификата", message='Сертификат "' + certnick + '"\n' + 'и ключевая пары удалены с токена ' + tokname)
#        tkMessageBox.showinfo(title="Удаление сертификата", message='Сертификат "' + certnick.encode('utf-8').decode('utf-8') + '"\n' + 'и ключевая пары удалены с токена ' + tokname)
    else:
        tkMessageBox.showinfo(title="Удаление сертификата", message='Сертификат "' + certnick + '"\n' + 'удален с токена ' + tokname)

def loadKeyCert(e, combobox, frameKey):
    global patch_win
    global NSSname
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]
    tokname = frameKey.STCombobox1.get()
    cmd_key = '"' + patch_win + 'certutil" -K ' + '-d "' + NSSname + '" -h ' + '"' + tokname + '"'
    print ('CMDloadkey=' + cmd_key)
    if sys.platform != "win32":
        id = pexpect.spawn(cmd_key)
    else:
        id = pexpect.popen_spawn.PopenSpawn(cmd_key, timeout=1)
    lseek = 0
    ret = -1
#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            root.update()
            tname = str(id.after)[29:-3]
            password('', tname, 0)
#            password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            lseek = 1
        elif (ret == 1):
            if(lseek == 0):
                lseek = 3
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

    res = id.before.decode('UTF-8')
    if sys.platform != "win32":
        id.close()
    if sys.platform != "win32":
        ll = res.split('\r')
    else:
        ll = res.split('\n')
    j = 0
    nick_key = []
    for i in range(0, len(ll)):
        in1 = ll[i].strip('\n')
        if (in1 == ''):
            continue
        if (in1[0:1] != "<" and j == 0):
            continue
        j = 1
        nick_key.append(in1)
    if not nick_key:
        tkMessageBox.showerror(title="Подписание файла",
                               message='Нет личных сертификатов')
        combobox.configure(values="")
        combobox.delete(0, END)
        return

    s = 'start'
    cert_user = []
    for s in nick_key:
        if (s == ""):
            break
        l = len(s)
#        b = s.rfind("(orphan)", l - 9, l - 1)
        b = s.rfind("(orphan)")
        if (b != -1):
            continue
        b = s.rfind("Always Auth Priv Key")
        if (b != -1):
            continue
        b = s.strip()
        a1 = s.find('>')
        if (a1 == -1):
            continue
        s = s[a1 + 1:]
        s = s.strip()
        a1 = s.find(' ')
        if (a1 == -1):
            continue
        s = s[a1 + 1:]
        s = s.strip()
        a1 = s.find(' ')
        if (a1 == -1):
            continue
        s = s[a1 + 1:]
        s = s.strip()
        s_t = tokname + ':'
        s_t_id = tokname + ':ID '
        len_st = len(s_t)
        len_st_id = len(s_t_id)
        if (s_t != s[0:len_st]):
            cert_user.append(tokname + ':' + s)
        else:
            if (s_t_id != s[0:len_st_id]):
                cert_user.append( s)
            else:
                cert_user.append(tokname + ':' + s)
    cert_user=sorted(cert_user)
    combobox.configure(values=cert_user)
    combobox.delete(0, END)
    combobox.insert(0, cert_user[0])

def loadCert(combobox, frameCert):
    global patch_win
    global NSSname
    global toknss
#    for tt in range(0,3):
#        print (toknss[tt])

    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]

    tokname = frameCert.STCombobox1.get()
    cmd_key = 'certutil -L ' + '-d "' + NSSname + '" -h ' + '"' + tokname + '"'
#    print ('CMDloadCert=' + cmd_key)
    if sys.platform != "win32":
        id = pexpect.spawn(cmd_key)
    else:
        cmd_key = '"' + patch_win + 'certutil" -L ' + '-d "' + NSSname + '" -h ' + '"' + tokname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_key, timeout=10)
    lseek = 0
    ret = -1
#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            root.update()
            tname = str(id.after)[29:-3]
            password('', tname, 0)
#            password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
                lseek = 1
            else:
                id.sendline(readpw)
#                lseek = 2
                lseek = 1
        elif (ret == 1):
            if(lseek == 0):
                if sys.platform != "win32":
                    lseek = 3
                else:
#                    lseek = 6
                    lseek = 3
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

    if sys.platform != "win321":
        res = id.before.decode('utf-8')
        if sys.platform != "win32":
            id.close()

    if sys.platform != "win32":
        if(py3 == True):
            ll = str(res).split('\r')
        else:
            ll = res.split('\n')
    else:
        ll = str(res).split('\n')
    j = 0
#'NSS Certificate DB', 'Builtin Object Token', 'NSS Generic Crypto Services'
    count = 0
    cert_all = []
    if (lseek > 1 and ll[1].find('Database needs user init') != -1):
        lseek = lseek + 2
    for s in ll[lseek:]:
        b = s.strip()
        if (b == ""):
            continue
        c = b.rfind(' ')
        if c == -1:
            s1 = b
        else:
            e = b[0:c]
            s1 = e.strip()
        last = len(s1)
        if(last > 0 and s1.find('C_Login()') != -1):
            continue
        if (last > 0):
            cert_all.append(s1)
    cert_all = sorted(cert_all)
    frameCert.STCombobox2.configure(values=cert_all)
    frameCert.STCombobox2.delete(0, END)
    if (cert_all == []):
        frameCert.STCombobox2.insert(0, "Сертификатов на токене нет!")
        frameCert.STCombobox2.configure(values="")
        frameCert.STCombobox2.delete(0, END)
#        pass
    else:
        frameCert.STCombobox2.insert(0, cert_all[0])

def addModule():
    global patch_win
    global item_mod
    global libname
    global NSSname
    global self1
#    if libname == '':
#        return
    namemod = self1.HEntry2.get()
    libname = self1.HEntry1.get()
    if (namemod == () or namemod == '' or libname == () or libname == ""):
        tkMessageBox.showinfo(title="Подключение модуля", message='Не все поля заполнены ')
        return
    cmd_addmod = '"' + patch_win + 'modutil" -add "' + namemod + '" -libfile "' + libname + '" -dbdir "' + NSSname + '"'
    if sys.platform != "win32":
        id = pexpect.spawn(cmd_addmod)
    else:
        cmd_addmod = '"' + patch_win + 'modutil" -add "' + namemod + '" -libfile "' + libname + '" -dbdir "' + NSSname + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_addmod, timeout=10)
##############################
    while(True):
        ret = id.expect(["to continue:", pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline("")
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

########################################
    res = id.before.decode('utf-8')
    if sys.platform != "win32":
        id.close()

    self1.HEntry2.delete(0, END)
    libfile = ''
    self1.HEntry1.delete(0, END)
    self1.HTButton2.configure(state='disabled')
    if (str(res).find('ERROR') != -1):
        tkMessageBox.showerror(title="Подключение модуля", message='Модуль ' +
                          namemod + '\nс библиотекой \n' + libname + '\nподключить не удалось\n' + res)
    else:
        tkMessageBox.showinfo(title="Подключение модуля", message='Модуль ' +
                          namemod + '\nс библиотекой \n' + libname + '\nдобавлен\n' + res)
    listMod()
    selectMod(0)
    sys.stdout.flush()

def findLibP11():
    global libname
    if sys.platform != "win32":
        libname = tkFileDialog.askopenfilename(title='Выбор библиотеки PKCS#11',initialdir='/usr/lib',
                                           filetypes=[('Библиотека', '.so'), ('Библиотека', '.so*'),('Библиотека MS', '.dll'), ('Библиотека MS', '.dll*')])
    else:
        libname = tkFileDialog.askopenfilename(title='Выбор библиотеки PKCS#11',initialdir='/usr/lib',
                                           filetypes=[('Библиотека MS', '.dll'), ('Библиотека MS', '.dll*'),('Библиотека', '.so'), ('Библиотека', '.so*')])
    if libname == ():  # Если имя файла было задано пользователем
        libname = ''
        return
# Если имя файла было задано пользователем
    self1.HEntry1.delete(0, 1)
    self1.HEntry1.insert(0, libname)
    self1.HTButton2.configure(state='normal')
    self1.HEntry2.focus_set()
    sys.stdout.flush()

def selectDB(top):
    global patch_win
    global NSSname
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]

    NSSname_temp = ''
    NSSname_temp = tkFileDialog.askdirectory(initialdir=home, title='Папка с хранилищем NSS', mustexist=False)
    if not NSSname_temp:
        return
    if (NSSname_temp == ''):
#        NSSname = ''
        return
    if not os.path.exists(NSSname_temp):
        os.makedirs(NSSname_temp)
    NSSname = NSSname_temp
    mes = 'Вы уверены, что хранилище в \n' + NSSname
    answer = tkMessageBox.askyesno(title='Каталог хранилища', message=mes)
    if(answer != True):
        return
#    NSSname = NSSname.encode("UTF-8")
    if not os.path.exists(NSSname):
        os.makedirs(NSSname)
    rb = varDB.get()
    if (rb == '1'):
        NSSname = 'sql:' + NSSname
    else :
        NSSname = 'dbm:' + NSSname
    cmd_mod = '"' + patch_win + 'modutil" -create -dbdir "' + NSSname + '"'
    PIPE = subprocess.PIPE
#ПЕРЕДЕЛАТЬ на expect из-за python3
    try:
        if sys.platform != "win32":
            id = pexpect.spawn(cmd_mod)
        else:
            id = pexpect.popen_spawn.PopenSpawn(cmd_mod, timeout=10)
    except:
            answer = tkMessageBox.askyesno(title='Каталог хранилища', message='Вам необходимо указать каталог с дистрибутивом NSS\nи повторно выбрать хранилище')
            if(answer != True):
                return
            patch_win = tkFileDialog.askdirectory(initialdir=home, title='Дистрибутив NSS')
            if not patch_win:
                return
            if (patch_win == ''):
                return
            if not os.path.exists(patch_win):
                return;
            patch_win = patch_win + '/'
            return

############
    while(True):
        ret = id.expect(["to continue:", pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            if sys.platform != "win32":
                id.send("\r")
            else:
                id.sendline("")
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return
#############
    res = id.before
    if sys.platform != "win32":
        id.close()

    self1.Entry1.delete(0, END)
    self1.Entry1.insert(0, NSSname)
    i = 0
    for i in range(0, 8):
        self1.TButtonR[i].configure(state='normal')
    if (rb == '0'):
        self1.TLabel1.configure(text=' NSS. Хранилище сертификатов на базе Berkeley DB')
    else:
        self1.TLabel1.configure(text=' NSS. Хранилище сертификатов на базе SQLite')
    listMod()
#Разблокировка окна с функциями
    try:
        root.tk.call('tk', 'busy', 'forget', top.Frame2)
    except:
# пустой оператор
        pass
#       print ("selectDB BUSY")

def selectDir(entry):
    sys.stdout.flush()
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]
    tekdir = tkFileDialog.askdirectory(initialdir=home)
    if not tekdir:
        return
    if tekdir == '':
        tekdir = ''
        return
    tekdir = tekdir.encode("UTF-8")
    if not os.path.exists(tekdir):
        os.makedirs(tekdir)
    entry.delete(0, END)
    entry.insert(0, tekdir.decode('UTF-8'))

def selectFile(entry, type):
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]
    ftype = ''
    ej = '1'
    if (type == 0):
        ftype = 'Файл для подписи'
    elif (type == 1):
        ftype = 'Файл для шифрования'
    elif (type == 2):
        ftype = 'Оригинальный файл'
    elif (type == 4):
        ftype = 'Файл с сертификатом'
    elif (type == 5):
        ftype = 'Файл с CA'
    elif (type == 6):
        ftype = 'Файл с PKCS#12'
    elif (type == 10):
        ftype = 'Файл с подписью'
    elif (type == 3):
        ej = typeEject.get()
        if (ej == '1'):
            ftype = 'Файл с подписью'
        elif (ej == '0'):
            ftype = 'Зашифрованный файл'

    if (type == 10 or (type == 3 and ej == '1')):
        fname = tkFileDialog.askopenfilename(title='Выберите файл',initialdir=home,
                                         filetypes=[(ftype + ' (p7s)', '*.p7s'),(ftype, '*')])
    elif (type == 3 and ej == '0'):
        fname = tkFileDialog.askopenfilename(title='Выберите файл',initialdir=home,
                                         filetypes=[(ftype + ' (p7m)', '*.p7m'),(ftype, '*')])
    elif (type == 4 or type == 5):
        fname = tkFileDialog.askopenfilename(title='Выберите сертификат',initialdir=home,
                                         filetypes=[(ftype, '*.cer'),(ftype, '*.crt'),(ftype + ' (pem/der)', '*.pem'),(ftype + ' (pem/der)', '*.der'),('Любой файл', '*')])
    elif (type == 0 or type == 2):
        fname = tkFileDialog.askopenfilename(title='Файл для подписи',initialdir=home,
                                         filetypes=[(ftype, '*.txt'),(ftype, '*.doc'),(ftype + ' (pdf/xml)', '*.pdf'),(ftype + ' (pdf/xml)', '*.xml'),('Любой файл', '*')])
    elif (type == 6):
        fname = tkFileDialog.askopenfilename(title='Выберите PKCS#12',initialdir=home,
                                         filetypes=[(ftype + ' (p12)', '*.p12'),(ftype + ' (pfx)', '*.pfx'),(ftype, '*')])
    else:
        fname = tkFileDialog.askopenfilename(title='Выберите файл',initialdir=home,
                                         filetypes=[(ftype, '*')])
    if fname == ():  # Если имя файла было задано пользователем
        return
# Если имя файла было задано пользователем
    entry.delete(0, END)
    entry.insert(0, fname)
    sys.stdout.flush()

def AddMod():
    global self1
    sys.stdout.flush()
    i = 4
    aa = self1.Frame4
    aa.pack_forget()

def AddDelMod():
    ReloadNSS()

def ejectOrig(frameEject):
    butej = typeEject.get()
    if (butej == '1'):
        frameEject.SLabelframe5.configure(text='''Подписанный файл (.p7s)''')
    elif (butej == '0'):
        frameEject.SLabelframe5.configure(text='''Зашифрованный файл (.p7m)''')

def listMod():
    global patch_win
    global self1
    global NSSname
    global item_mod
    global item_lib
    if NSSname == '':
        return
    cmd_lmod = '"' + patch_win + 'modutil" -list ' + ' -dbdir "' + NSSname + '"' 
#    print ('cmd_lmod=' + str(cmd_lmod))
    item_mod = []
    item_lib = []
    tt = 1
    rb = varDB.get()

    PIPE = subprocess.PIPE
    p = subprocess.Popen(cmd_lmod, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    s = ' '
    item_tok = []
    while s:
        s = p.stdout.readline()
        if sys.platform != "win32":
    	    s1 = s.decode('UTF-8').rstrip()
        else:
    	    s1 = s.decode('CP1251').rstrip()
        ind1 = s1.find(". ")
        if (ind1 == -1):
            continue
        modname = s1[ind1 + 2 :]
        sl = p.stdout.readline()
        if sys.platform != "win32":
    	    sl1 = sl.decode('UTF-8').rstrip()
        else:
    	    sl1 = sl.decode('CP1251').rstrip()
        ind = sl1.find("library name: ")
        if (ind == -1):
            libname = modname
        else:
            libname = sl1[ind + 14 :]
#        print ('LIB=' + '"' + libname + '"')
#        print ('LIST=' + '"' + modname + '"')
        item_mod.append(modname.strip('\r '))
        item_lib.append(libname)
    sys.stdout.flush()
    self1.HTCombobox1.delete(0, END)
    self1.HTCombobox1.configure(values=item_mod)
    self1.HEntry3.delete(0, END)
    if (len(item_mod) > 0) :
        self1.HTCombobox1.set(item_mod[len(item_mod) - 1])
        self1.HEntry3.insert(0, item_lib[len(item_mod) - 1])
    return

def ReloadNSS():
    global w
    global self1
    global SignBox1
    but_pr = varBut.get()
    sys.stdout.flush()
    but_last = lastBut.get()
    if (but_last != but_pr):
        #	    return
        self1.FrameRab[int(but_last)].pack_forget()
        lastBut.set(but_pr)
        self1.FrameRab[int(but_pr)].pack(in_=self1.Frame3, anchor='n', expand=1, fill='both', side='top')
    if (but_pr == '1'):
        self1.FrameRab[1].configure(text='Добавить/удалить модуль PKCS#11')
###############
        butadd = addMod.get()
        if (butadd == '1'):
#Добавить модуль
#Блокируем фрейм
            root.tk.call('tk', 'busy', 'hold', self1.HLabelframe4)
            try:
                root.tk.call('tk', 'busy', 'forget', self1.HLabelframe3)
            except:
# пустой оператор
                pass
#                print ("ReloadNSS BUSY")
#            self1.HTButton2.configure(state='normal')
            self1.HTButton3.configure(state='disabled')
        elif (butadd == '0'):
#Удалить модуль
            root.tk.call('tk', 'busy', 'hold', self1.HLabelframe3)
            root.tk.call('tk', 'busy', 'forget', self1.HLabelframe4)
#            self1.HTButton2.configure(state='disabled')
            self1.HTButton3.configure(state='normal')

        if (but_last != but_pr):
            listMod()
            selectMod(0)
    elif (but_pr == '2'):
        listToken(self1.FrameRab[2].STCombobox1)
        self1.FrameRab[2].STCombobox2.configure(values="")
        self1.FrameRab[2].STCombobox2.delete(0, END)
#        loadCert(self1.FrameRab[2].STCombobox1, self1.FrameRab[2])
#        print ('Управление сертификатами')
    elif (but_pr == '3'):
#        print ('Подписание файлов')
        listToken(self1.FrameRab[3].STCombobox1)
        self1.FrameRab[3].STCombobox2.configure(values="")
        self1.FrameRab[3].STCombobox2.delete(0, END)
#        loadCert(self1.FrameRab[3].STCombobox1, self1.FrameRab[3])
    elif (but_pr == '4'):
#        print ('Шифрование файлов')
        listToken(self1.FrameRab[4].STCombobox1)
        self1.FrameRab[4].STCombobox2.configure(values="")
        self1.FrameRab[4].STCombobox2.delete(0, END)
#        loadCert(self1.FrameRab[4].STCombobox1, self1.FrameRab[4])
    elif (but_pr == '7'):
        print ('Создание запроса')
        listToken(self1.FrameRab[7].STCombobox1)
    elif (but_pr == '0'):
#        print ('Разработчик')
        pass

def listToken(comboTok):
    global patch_win
    global NSSname
    global item_tok
    if NSSname == '':
        return
    if sys.platform != "win32":
        cmd = '"' + patch_win + 'certutil" -U ' + ' -d "' + NSSname + '"'
#        cmd = 'certutil -U ' + '-d ' + NSSname + '|grep \"   token: \"'
    else:
        cmd = '"' + patch_win + 'certutil" -U ' + '-d "' + NSSname + '"'

    PIPE = subprocess.PIPE
    p = subprocess.Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    s = ' '
    item_tok = []
    while s:
        s = p.stdout.readline()
        s1 = s.decode('UTF-8').rstrip()
        if (s1.find("   token: ") == -1):
            continue
        item_tok.append(s1[10:])
    if (item_tok != []):
        comboTok.configure(values=item_tok)
        comboTok.set(item_tok[len(item_tok) - 1])
    sys.stdout.flush()

def selectMod(event):
    global patch_win
    global NSSname
    global item_lib
    global item_mod
    if (item_mod == [] or item_lib ==[]):
        return
    current = self1.HTCombobox1.current()
    self1.HEntry3.delete(0, END)
    self1.HEntry3.insert(0, item_lib[current])
    if sys.platform != "win32":
        cmd = '"' + patch_win + 'modutil" -list ' + '"' + item_mod[current] + '"' + ' -dbdir "' + NSSname + '"'
    else:
        cmd = '"' + patch_win + 'modutil" -list ' + '"' + item_mod[current] + '"' + ' -dbdir "' + NSSname + '"'
    PIPE = subprocess.PIPE
    p = subprocess.Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    s = p.stdout.readline()
    self1.HScrolledtext1.configure(state='normal')
    self1.HScrolledtext1.delete('1.0', END)
    while s:
        self1.HScrolledtext1.insert(END, s)
        s = p.stdout.readline()
    self1.HScrolledtext1.configure(state='disabled')

def checkSign(frameCheck):
    global patch_win
    global NSSname
    origfile = frameCheck.SEntry1.get()
    signfile = frameCheck.SEntry2.get()
    if (origfile == () or origfile == ''):
        tkMessageBox.showinfo(title="Проверка подписи", message='Не выбран подписанный документ!\n')
        return
    if (signfile == () or signfile == ''): 
        tkMessageBox.showinfo(title="Проверка подписи", message='Не выбран файл с подписью\n')
        return

    if sys.platform != "win32":
        cmd = '"' + patch_win + 'signver" -AV -v -d "' + NSSname + '" -i "' +  origfile +  '" -s "' + signfile + '"'
    else:
        cmd = '"' + patch_win + 'signver" -AV -v -d "' + NSSname + '" -i "' +  origfile +  '" -s "' + signfile + '"'
    print('checkSign=' + cmd)
    PIPE = subprocess.PIPE 
    p = subprocess.Popen(cmd, shell = True, 
       stdin = PIPE, stdout = PIPE, stderr = PIPE)         
    s = ' '           
    valid = False
    Time = ''
    cn = ''
    email = ''
    reason = ''
    while s:
        s=p.stdout.readline().decode('utf-8').rstrip()
        if (Time == 'Signing Time'):
            ind = s.find('value[0]=')
            Time = s[ind + 9:]
        elif (s == 'signatureValid=yes'):
            valid = True
        elif (s.find('signatureValid=no:') != -1):
            idx = s.find('signatureValid=no:')
            valid = False
            reason = s[idx:]
        elif(s.find('Signing Time') != -1):
            Time = 'Signing Time'
            continue
        elif(s.find('subject=') != -1):
            ind = s.find('CN=')
            if (ind == -1):
                continue
            s1 = s[ind + 3:]
            inde = s1.find(',')
            if (inde == -1):
                cn = s1
            else:
                cn = s1[0:inde]
##############EMAIL############
            ind = s.find('E=')
            if (ind == -1):
                continue
            s1 = s[ind + 2:]
            inde = s1.find(',')
            if (inde == -1):
                email = s1
            else:
                email = s1[0:inde]

    if (valid == False):
        s=p.stderr.readline().decode('utf-8').rstrip()
        tkMessageBox.showerror(title='Проверка подписи', message='Подпись не прошла проверку. Причина:\n' + reason, detail=s)
    else:
        if(py3 == True):
            mes = 'Подпись верна и сделана\n' + Time + '\n\nCN=' + cn + '\nemail: ' + email 
        else:
            mes = 'Подпись верна и сделана\n'.decode('utf-8') + Time + '\n\nCN=' + cn + '\nemail: ' + email 
        tkMessageBox.showinfo(title='Проверка подписи', message=mes)


def signFile(frameSign):
    global patch_win
    global NSSname
    global filesign
    rb = str(typeSign.get())
    enc = ''
    if rb == '1':
        enc = ' -e '
    certnick = frameSign.STCombobox2.get()
    file = frameSign.SEntry1.get()
    dir = frameSign.SEntry2.get()
    if (certnick == () or certnick == ''): 
        tkMessageBox.showinfo(title="Подписать файл", message='Не выбран сертификат подписанта\n')
        return
    if (file == () or file == ''):
        tkMessageBox.showinfo(title="Подписать файл", message='Не выбран документ для подписи!\n')
        return
    if (dir == () or dir == ''): 
        tkMessageBox.showinfo(title="Подписать файл", message='Не выбран каталог для подписи\n')
        return

    s1 = os.path.basename(file) + '.p7s'
    filesign = os.path.join(dir, s1)

    tokname = frameSign.STCombobox1.get()
#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    print (entpw)
    if sys.platform != "win32":
        home = os.environ["HOME"]
        cmd_sign = '"' + patch_win + 'p7sign" ' + enc + ' -k "' + certnick + '" -d "' + \
            NSSname + '" -i "' + file + '" -o "' + filesign + '"'
        id = pexpect.spawn(cmd_sign, timeout=10)
    else:
        home = os.environ["USERPROFILE"]
        fout_exp = ' -o "' + filesign + '"'
        certnick_utf8 = certnick.encode('utf-8').decode('utf-8', errors='replace')
        ind_i = certnick.find("И")
        if (ind_i == -1):
            cmd_sign = '"' + patch_win + 'p7sign" ' + enc + ' -k "' + certnick.encode('utf-8').decode('cp1251') + '" -d "' + \
                NSSname + '" -i "' + file + '" -o "' + filesign.encode('cp1251').decode('cp1251') + '"'
        cmd_sign_utf8 = '"' + patch_win + 'p7sign" ' + enc + ' -k "' + certnick_utf8 + '" -i "' + file.encode('cp1251').decode('cp1251') + '" -d "' + NSSname + '"' + fout_exp
        if (ind_i != -1):
    	    cmd_sign = cmd_sign_utf8.encode('cp1251').decode('cp1251')
#################
        id = pexpect.popen_spawn.PopenSpawn(cmd_sign, timeout=1)
    print('signFile=' + cmd_sign)
##############################
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
#            print(str(id.after))
#            print(id.after)
            tname = str(id.after)[29:-3]
            print(tname)
#            password('', tokname, 0)
            password('', tname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                print ("Выход по readpwok == 0")
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return
########################################
    if not os.path.exists(filesign):
        tkMessageBox.showerror(
            title="Подписание файла", message='Подпись сформировать не удалось\nПроверьте исходные данные', detail=id.before.decode('utf-8'))
        return
    if os.path.getsize(filesign) == 0:
        os.remove(filesign)
        tkMessageBox.showerror(
            title="Подписание файла", message='Подпись сформировать не удалось\nПроверьте исходные данные', detail=id.before.decode('utf-8'))
        return
    if (py3 == True):
        tkMessageBox.showinfo(title="Подписание файла",
                          message='Подпись сформирована в\n"' + filesign + '"')
    else:
        tkMessageBox.showinfo(title="Подписание файла",
                          message='Подпись сформирована в\n"' + filesign.encode('utf-8') + '"')
    sys.stdout.flush()

def cipherFile(frameCipher):
    global patch_win
    global NSSname
    certnick = frameCipher.STCombobox2.get()
    file = frameCipher.SEntry1.get()
    dir = frameCipher.SEntry2.get()
    if (certnick == () or certnick == ''): 
        tkMessageBox.showinfo(title="Шифрование файла", message='Не выбран сертификат получателя\n')
        return
    if (file == () or file == ''):
        tkMessageBox.showinfo(title="Шифрование файла", message='Не выбран документ для шифрования!\n')
        return
    if (dir == () or dir == ''): 
        tkMessageBox.showinfo(title="Шифрование файла", message='Не выбран каталог для хранения зашифрованного документа\n')
        return
    tokname = frameCipher.STCombobox1.get()

    s1 = os.path.basename(file) + '.p7m'
    filecipher = os.path.join(dir, s1)

    if sys.platform != "win32":
        cmd_cipher = '"' + patch_win + 'p7env" -r "' + certnick + '" -d "'  + NSSname + '" -i "' + file + '" -o "' + filecipher + '"'
        print('cipherFile 4')
        id = pexpect.spawn(cmd_cipher, timeout=1)
    else:
        cmd_cipher = '"' + patch_win + 'p7env" -r "' + certnick.encode('utf-8').decode('cp1251') + '" -d "'  + NSSname + '" -i "' + file.encode('cp1251').decode('cp1251') + '" -o "' + filecipher.encode('cp1251').decode('cp1251') + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_cipher, timeout=1)
#    print('CMD_CIPHER=' + cmd_cipher)
#####################
#    entpw = 'Enter Password or Pin for "'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            tname = str(id.after)[29:-3]
            password('', tname, 0)
#            password('', tokname, 0)
            if (readpwok == 0):
                if sys.platform != "win32":
                    id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            break
#            return
####################
    if not os.path.exists(filecipher):
        tkMessageBox.showerror(
            title="Шифрование файла", message='Файл зашифровать не удалось\nПроверьте исходные данные', detail=id.before.decode('utf-8'))
        return
    if os.path.getsize(filecipher) == 0:
        os.remove(filecipher)
        tkMessageBox.showerror(
            title="Шифрование файла", message='Файл зашифровать не удалось\nПроверьте исходные данные', detail=id.before.decode('utf-8'))
        return
    tkMessageBox.showinfo(title="Шифрование файла",
                          message='Зашифрованный файл сохранен в\n"' + filecipher + '"')

def ejectFile(frameEject):
    global patch_win
    global NSSname
    butej = typeEject.get()
    if (butej == '1'):
        frameEject.SLabelframe5.configure(text='''Подписанный файл (.p7s)''')
        mes1 = 'Не выбран файл с ЭП\n'
    elif (butej == '0'):
        frameEject.SLabelframe5.configure(text='''Зашифрованный файл (.p7m)''')
        mes1 = 'Не выбран зашифрованный файл\n'
    else:
        tkMessageBox.showinfo(title="Извлечение контента", message='Неизвестная операция')
        return
    file = frameEject.SEntry1.get()
    if (file == () or file == ''):
        tkMessageBox.showinfo(title="Извлечение контента", message=mes1)
        return
#Исправить при подписании или шифровании
    file_base = os.path.basename(file)
    file_b, file_e = os.path.splitext(file_base)
    if (file_e == ''):
        file_e = '.orig'
    else:
        file_e = ''
    dir = frameEject.SEntry2.get()
    if (dir == () or dir == ''): 
        tkMessageBox.showinfo(title="Извлечение коноента", message='Не выбран каталог для контента\n')
        return
    fileorig = os.path.join(dir, file_b)
    if sys.platform != "win32":
        cmd_content = '"' + patch_win + 'p7content" -d ' + NSSname + ' -i "' + file  + '" -o "' + fileorig + '"'
        id = pexpect.spawn(cmd_content)
    else:
        cmd_content = '"' + patch_win + 'p7content" -d ' + NSSname + ' -i "' + file.encode('cp1251').decode('cp1251')  + '" -o "' + fileorig.encode('cp1251').decode('cp1251') + '"'
        id = pexpect.popen_spawn.PopenSpawn(cmd_content, timeout=1)
#    print ('CMD_CONTENT=' + cmd_content)
#####################
    try:
        id.expect('Enter Password or Pin for "')
        id.expect("\":")
        tokname = id.before.decode('UTF-8')
        password('', tokname, 0)
        readpwok = 1
        if (readpwok == 0):
            if sys.platform != "win32":
                id.close()
#            return
        if sys.platform != "win32":
            id.send(readpw)
            id.send("\r")
        else:
            id.sendline(readpw)
    except:
        if sys.platform != "win32":
            id = pexpect.spawn(cmd_content)
        else:
            id = pexpect.popen_spawn.PopenSpawn(cmd_content, timeout=1)
        pass

    id.expect(pexpect.EOF)
####################
#    res = id.before
    if sys.platform != "win32":
        res = id.before
        id.close()
    else:
        res = id.before.decode('UTF-8')
    f=open(fileorig, "r+b").readlines()
    if sys.platform == "win32":
        f = [l.replace(b'\r\r\n', b'\r\n')  for l in f]
#Для подписи
    if (butej == '1'):
        if sys.platform != "win32":
            for i in [0,0,-1, -1,-1,-1,-1,-1,-1]:
                f.pop(i)
        else:
            for i in [0,0,-1, -1,-1,-1,-1,-1,-1]:
                f.pop(i)
        butej = '0'
    else:
#Для шифрования
        for i in [0,0,-1, -1,-1,-1]:
            try:
                f.pop(i)
            except:
                tkMessageBox.showerror(title="Расшифровка файла", message='Расшифровать не удалось\nОтсутствует сертификат, на котором шифровали')
                return

    with open(fileorig,'w+b') as F:
        F.writelines(f)
#Для шифрования
    if (butej == '0'):
        f = open(fileorig, "r+b")
        if sys.platform != "win32":
            f.seek(-1, os.SEEK_END)
        else:
            f.seek(-2, os.SEEK_END)
        f.truncate()
        f.close()
    if not os.path.exists(fileorig):
        tkMessageBox.showerror(
            title="Извлечение оригинального файла", message='Файл извлечь не удалось\nПроверьте исходные данные')
        return
    tkMessageBox.showinfo(title="Извлечение оригинального файла",
                          message='Оригинальный файл сохранен в\n"' + fileorig + '"')

def viewCert(frameCert):
    global patch_win
    global img_p11
    font9 = "-family sans-serif -size -12 -weight normal -slant "  \
        "roman -underline 0 -overstrike 0"
    certnick = frameCert.STCombobox2.get()
    if (certnick == () or certnick == ''): # Если имя файла было задано пользователем
        tkMessageBox.showinfo(title="Просмотр сертификата", message='Сертификат не выбран!\n')
        return ('', '')
    if sys.platform == "win32":
        ind_i = certnick.find("И")
#        certnick = certnick.replace("И", "Ъ")
        certnick_utf8 = certnick.encode('utf-8').decode('utf-8', errors='replace')
        certnick = certnick.encode('cp1251').decode('cp1251', errors='replace')
##        certnick = certnick.encode('utf-8').decode('cp1251', errors='slashescape')
###############
        lines = []
        for line in [certnick.encode('utf-8')]:
            lines.append(line.decode('cp1251', 'slashescape'))

#        certnick = lines[0]

###################

    res = {}
    cmd = '"' + patch_win + 'certutil" -L -d "' + NSSname + '" -n "' + certnick
###############
    if sys.platform == "win32":
        home = os.environ["USERPROFILE"]
        cmd_utf8 = '"' + patch_win + 'certutil" -L -d "' + NSSname + '" -n "' + certnick_utf8
#        if (ind_i != -1):
#    	    cmd = cmd_utf8.encode('cp1251').decode('cp1251')
    else:
        home = os.environ["HOME"]
#################
#    print('viewCert=' + cmd)
    
    if sys.platform != "win32":
        id = pexpect.spawn(cmd)
    else:
        id = pexpect.popen_spawn.PopenSpawn(cmd, timeout=1)
    while(True):
        ret = id.expect(['Enter Password or Pin for "', pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 1):
            break
        elif (ret == 2):
            break
        id.expect("\":")
        tokname = id.before.decode('UTF-8')
        password('', tokname, 0)
        if (readpwok == 0):
            if sys.platform != "win32":
                id.close()
            return
        if sys.platform != "win32":
            id.send(readpw)
            id.send("\r")
        else:
            id.sendline(readpw)
    if sys.platform != "win32":
        res = id.before.decode('utf-8')
        id.close()
#        ll = res.split('\r')
    else:
        res = id.before.decode('utf-8', 'replace')
#        ll = res.split('\n')
##########################################
    top=Toplevel(root, bg="#eff0f1", padx=2, pady=2, width=600, height=350, highlightbackground="#39b5da", highlightthickness='3')

    top.tk.call('wm', 'iconphoto', top._w, img_p11)
    top.title("Просмотр сертификата")
#Центрируем справочное окно в основном окне
    geometr = rect2window( root, 600, 350)
#    print("GEOMETR=" + str(geometr))
    top.geometry(geometr)
#    top.geometry("600x350+300+150")
#Окно не может перекрываться (yes)
    top.attributes('-topmost', 'yes')

    fra = Frame (top)
    txt = Text(fra, bg="white", bd=0, font=font9, height=14,width=10, wrap=NONE)
    hsb = ttk.Scrollbar(fra, orient='horizontal', command=txt.xview)
    vsb = ttk.Scrollbar(fra, orient='vertical', command=txt.yview)
    txt['yscrollcommand'] = vsb.set
    txt['xscrollcommand'] = hsb.set

    vsb.grid(row=0, column=1, sticky='ns')
    hsb.grid(row=1, column=0, sticky='we')
    txt.grid(row=0, column=0, sticky='nwse')
    fra.grid_columnconfigure(0, weight=1)
    fra.grid_rowconfigure(0, weight=1)
    
    fra.pack(side='top', fill='both', expand=1)
    but = ttk.Button(top, text='Насмотрелся', command=(lambda e=top: cancelPwd(e)))
    but.pack(side='right', pady=5, padx='1mm')
    txt.delete("1.0", END)
#######################################
    txt.configure(font="courier 9 ")
    fnt_std = txt.cget('font')
    fnt_l = fnt_std.split(' ')
    fnt_bold = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'bold'
    fnt_italic = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'italic'
    txt.tag_configure('bold', font=fnt_bold)
    txt.tag_configure('italic', font=fnt_italic)
#    print(res)
    ss = res.split('\n')
    for s1 in ss:
        s1 = s1.replace("\r", "")
        s = s1 + '\n'
        if not s:
            break
        inds = s.find(': ')
        if (inds != -1):
            its = txt.index('insert')
            txt.insert (END,  s[0:inds + 1])
            ite = txt.index('insert')
            txt.tag_add('bold', its, ite)
            txt.insert (END,  s[inds + 1:])
        else:
            if sys.platform != "win32":
                inds = s.find(':\n')
            else:
                inds = s.find(':\r')
            if (inds == -1):
                txt.insert (END, s)
                continue
            inds1 = s.find(':')
            if (inds1 != inds):
                txt.insert (END, s)
                continue
            its = txt.index('insert')
            txt.insert (END,  s[0:inds + 1])
            ite = txt.index('insert')
            txt.tag_add('bold', its, ite)
            txt.insert (END,  s[inds + 1:])

    txt.configure(state='disabled')
#Блокируем фрейм
#    top.grab_set()
    root.tk.call('tk', 'busy', 'hold', root)
    top.wait_window()

def view_pp(cmd_view, cert_pem):
    font9 = "-family courier -size -12 -weight normal -slant "  \
        "roman -underline 0 -overstrike 0"
    PIPE = subprocess.PIPE 
    process = subprocess.Popen(cmd_view, shell = True, stdout = PIPE, stderr = PIPE, stdin = PIPE)
    if(cert_pem != ''):
        stdout, stderr = process.communicate(input=cert_pem.encode('utf-8'))
    else:
        stdout, stderr = process.communicate()
    top=Toplevel(root, bg="#eff0f1", padx=2, pady=2, width=600, height=350, highlightbackground="#39b5da", highlightthickness='3')

    top.tk.call('wm', 'iconphoto', top._w, img_p11)
    if (cmd_view.find('-t cr ') == -1):
        top.title("Просмотр сертификата")
    else:
        top.title("Просмотр запроса на сертификат")
#Центрируем справочное окно в основном окне
    geometr = rect2window( root, 600, 350)
#    print("GEOMETR=" + str(geometr))
    top.geometry(geometr)
#    top.geometry("600x350+300+150")
#Окно не может перекрываться (yes)
    top.attributes('-topmost', 'yes')

    fra = Frame (top)
    txt = Text(fra, bg="white", bd=0, font=font9, height=14,width=10, wrap=NONE)
    hsb = ttk.Scrollbar(fra, orient='horizontal', command=txt.xview)
    vsb = ttk.Scrollbar(fra, orient='vertical', command=txt.yview)
    txt['yscrollcommand'] = vsb.set
    txt['xscrollcommand'] = hsb.set

    vsb.grid(row=0, column=1, sticky='ns')
    hsb.grid(row=1, column=0, sticky='we')
    txt.grid(row=0, column=0, sticky='nwse')
    fra.grid_columnconfigure(0, weight=1)
    fra.grid_rowconfigure(0, weight=1)
    
    fra.pack(side='top', fill='both', expand=1)
    but = ttk.Button(top, text='Насмотрелся', command=(lambda e=top: cancelPwd(e)))
    but.pack(side='right', pady=5, padx='1mm')
    txt.delete("1.0", END)
#######################################
    txt.configure(font="courier 9 ")
    fnt_std = txt.cget('font')
    fnt_l = fnt_std.split(' ')
    fnt_bold = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'bold'
    fnt_italic = fnt_l[0] + ' ' + fnt_l[1] + ' ' + 'italic'
    txt.tag_configure('bold', font=fnt_bold)
    txt.tag_configure('italic', font=fnt_italic)
    ss = stdout.decode('utf-8', errors='slashescape').split('\n')
    for s1 in ss:
            s = s1 + '\n'
            if not s:
                break
            inds = s.find(': ')
            if (inds != -1):
                its = txt.index('insert')
                txt.insert (END,  s[0:inds + 1])
                ite = txt.index('insert')
                txt.tag_add('bold', its, ite)
                txt.insert (END,  s[inds + 1:])
            else:
                if sys.platform != "win32":
                    inds = s.find(':\n')
                else:
                    inds = s.find(':\r')
                if (inds == -1):
                    txt.insert (END, s)
                    continue
                inds1 = s.find(':')
                if (inds1 != inds):
                    txt.insert (END, s)
                    continue
                its = txt.index('insert')
                txt.insert (END,  s[0:inds + 1])
                ite = txt.index('insert')
                txt.tag_add('bold', its, ite)
                txt.insert (END,  s[inds + 1:])
    txt.configure(state='disabled')
#Блокируем фрейм
#    top.grab_set()
    root.tk.call('tk', 'busy', 'hold', root)
    top.wait_window()


def typeImportCert(type, frameManager):
    if (type == 1):
        frameManager.CAP12.pack_forget()
        frameManager.ButtonImport.pack_forget()
        frameManager.ButtonViewCert.pack_forget()
        frameManager.Labelframe4.pack(expand=1,fill='x',side='bottom')
        frameManager.SLabelframe5.configure(text='Файл с корневым сертификатом')
        frameManager.STButton3.configure(command=(lambda e=frameManager.SEntry1: selectFile(e, 5)))
        frameManager.SEntry1.delete(0, END)
        return
    else:
        frameManager.Labelframe4.pack_forget()
    if (type == 0):
        frameManager.CAP12.pack_forget()
        frameManager.ButtonImport.configure(text='Импортировать сертификат')
        frameManager.SLabelframe5.configure(text='Файл с сертификатом')
        frameManager.ButtonViewCert.configure(text='Просмотреть сертификат')
        frameManager.ButtonViewCert.pack(anchor='n', expand=0, fill='none',side='left', pady=15,padx=5)
        frameManager.ButtonImport.pack(anchor='n', expand=0, fill='none',side='right', pady=15)
        frameManager.STButton3.configure(command=(lambda e=frameManager.SEntry1: selectFile(e, 4)))
        frameManager.SEntry1.delete(0, END)
    elif (type == 2):
#        frameManager.ButtonViewCert.pack_forget()
        frameManager.ButtonViewCert.pack_forget()
        frameManager.ButtonImport.pack_forget()
        
        frameManager.CAP12.pack(anchor='nw',expand=1,fill='x',side='top')

        frameManager.ButtonViewCert.configure(text='Просмотреть сертификаты из PKCS12')
        frameManager.ButtonViewCert.pack(anchor='n', expand=0, fill='none',side='left', pady=15,padx=5)
        frameManager.ButtonImport.pack(anchor='n', expand=0, fill='none',side='right', pady=15)
        frameManager.ButtonImport.configure(text='Импортировать на токен')
        frameManager.SLabelframe5.configure(text='Файл с контейнером PKCS12')
        frameManager.STButton3.configure(command=(lambda e=frameManager.SEntry1: selectFile(e, 6)))
        frameManager.SEntry1.delete(0, END)

def frameAddLib(self, labelfr):

    self.HLabelframe1 = labelfr

    self.HFrame1 = Frame(self.HLabelframe1, pady=0, padx=0)
    self.HFrame1.pack(in_=self.HLabelframe1, anchor='n',
                      expand=1, fill='x', padx=5, pady='1mm', side='top')
    self.HFrame1.configure(relief=GROOVE)
    self.HFrame1.configure(borderwidth="0")
    self.HFrame1.configure(background="#eff0f1")
    self.HFrame1.configure(highlightbackground="#39b5da", highlightcolor="#39b5da", highlightthickness='1')

    self.HTRadiobutton1 = ttk.Radiobutton(self.HLabelframe1, padding='1mm 0 0 0')
    self.HTRadiobutton1.configure(variable=addMod)
    self.HTRadiobutton1.configure(command=AddDelMod)
    self.HTRadiobutton1.configure(value="1")

    self.HLabelframe3 = LabelFrame(self.HFrame1)
    self.HLabelframe3.pack(in_=self.HFrame1, anchor='n',
                           expand=1, fill='x', padx=0, side='top', pady=0)

    self.HLabelframe3.configure(relief=GROOVE)
    self.HLabelframe3.configure(borderwidth="0")
    self.HLabelframe3.configure(labelanchor='n', text='''Добавить модуль PKCS#11''')
    self.HLabelframe3.configure(background="white", highlightcolor="#39b5da", highlightthickness='0')

    self.HFrame3 = Frame(self.HLabelframe3)
    self.HFrame3.pack(in_=self.HLabelframe3, anchor='n',
                      expand=1, fill='x', padx=0, side='top')
    self.HFrame3.configure(relief=GROOVE)
    self.HFrame3.configure(borderwidth="0")
    self.HFrame3.configure(background="white")

    self.HTButton1 = ttk.Button(self.HFrame3)
    self.HTButton1.pack(in_=self.HFrame3, anchor='center',
                        expand=0, fill='none', side='left', padx='1mm 0')
    self.HTButton1.configure(command=findLibP11)
    self.HTButton1.configure(text='''Библиотека''', compound='left')
    self.HTButton1.bind('<Enter>', lambda e=self.HTButton1: showhelp(e, self.HTButton1, helpview, 'Выбор файла с библиотекой PKCS#11', 'left'))
    self.HTButton1.bind('<Leave>', lambda e=self.HTButton1: hidehelp(e, helpview))

    self.HTRadiobutton1.bind('<Enter>', lambda e=self.HTRadiobutton1: showhelp(e, self.HTRadiobutton1, helpview, 'Добавить модуль', 'left'))
    self.HTRadiobutton1.bind('<Leave>', lambda e=self.HTRadiobutton1: hidehelp(e, helpview))
#    self.HTRadiobutton1.place(in_=self.HTButton1, relx='0.0', rely='-0.7', anchor='nw')
    self.HTRadiobutton1.place(in_=self.HFrame1, relx='0.0', rely='0.0', anchor='nw')
    self.HTRadiobutton1.tkraise()

    self.HEntry1 = ttk.Entry(self.HFrame3)
    self.HEntry1.pack(in_=self.HFrame3, anchor='center',
                      expand=1, fill='x', padx='1mm', side='right')

    self.HFrame4 = Frame(self.HLabelframe3)
    self.HFrame4.pack(in_=self.HLabelframe3, anchor='n',
                      expand=1, fill='x', padx='1mm', pady='1mm', side='top')
    self.HFrame4.configure(relief=GROOVE)
    self.HFrame4.configure(borderwidth="0")
    self.HFrame4.configure(background="white")

    self.HLabel1 = Label(self.HFrame4)
    self.HLabel1.pack(in_=self.HFrame4, anchor='w',
                      expand=0, fill='none', side='left')
    self.HLabel1.configure(background="white")
    self.HLabel1.configure(text='''Имя модуля:''')

    self.HEntry2 = ttk.Entry(self.HFrame4)
    self.HEntry2.pack(in_=self.HFrame4, anchor='center',
                      expand=1, fill='x', padx=2, side='left')
    self.HEntry2.configure(background="white")

    self.HTButton2 = ttk.Button(self.HFrame4)
    self.HTButton2.pack(in_=self.HFrame4, anchor='center',
                        expand=0, fill='none', side='right', padx=1)
    self.HTButton2.configure(text='''Подключить''')
    self.HTButton2.configure(command=addModule)

    self.HFrame2 = Frame(self.HLabelframe1)
    self.HFrame2.pack(in_=self.HLabelframe1, anchor='n',
                      expand=1, fill='x', padx=5, side='top', pady='1mm')

    self.HFrame2.configure(relief=GROOVE)
    self.HFrame2.configure(background="#eff0f1")
    self.HFrame2.configure(highlightbackground="#39b5da", highlightcolor="#39b5da", highlightthickness='1')

    self.HTRadiobutton2 = ttk.Radiobutton(self.HLabelframe1, padding='1mm 0 0 0')
    self.HTRadiobutton2.configure(variable=addMod)
    self.HTRadiobutton2.configure(command=AddDelMod)
    self.HTRadiobutton2.configure(value="0")

    self.HLabelframe4 = LabelFrame(self.HFrame2)
    self.HLabelframe4.pack(in_=self.HFrame2, anchor='n',
                           expand=1, fill='x', padx=0, side='top', pady=0)

    self.HLabelframe4.configure(relief=GROOVE)
    self.HLabelframe4.configure(borderwidth="0")
    self.HLabelframe4.configure(labelanchor='n', text='''Удалить модуль PKCS#11''')
    self.HLabelframe4.configure(background="white")
    self.HLabelframe4.configure(highlightbackground="#39b5da", highlightcolor="#39b5da", highlightthickness='0')

#    self.HFrame5 = Frame(self.HLabelframe4)
    self.HFrame5 = Frame(self.HLabelframe1)

    self.HFrame5.pack(in_=self.HLabelframe4, anchor='n',
                      expand=1, fill='x', side='top', padx='1mm')

    self.HFrame5.configure(relief=GROOVE)
    self.HFrame5.configure(borderwidth="0")
    self.HFrame5.configure(background="white")
    self.HFrame5.configure(width=125)

    self.HLabel2 = Label(self.HFrame5)
    self.HLabel2.pack(in_=self.HFrame5, expand=0, fill='none', side='left')

    self.HLabel2.configure(background="white")
    self.HLabel2.configure(text='''Выберите модуль:''')
    self.HTRadiobutton2.bind('<Enter>', lambda e=self.HTRadiobutton2: showhelp(e, self.HTRadiobutton2, helpview, 'Удалить модуль', 'left'))
    self.HTRadiobutton2.bind('<Leave>', lambda e=self.HTRadiobutton2: hidehelp(e, helpview))
#    self.HTRadiobutton2.place(in_=self.HLabel2, relx='0.0', rely='-1.2', anchor='nw')
    self.HTRadiobutton2.place(in_=self.HFrame2, relx='0.0', rely='0.0', anchor='nw')
    self.HTRadiobutton2.tkraise()

    self.HTButton3 = ttk.Button(self.HFrame5)
    self.HTButton3.pack(in_=self.HFrame5, anchor='center', expand=0, fill='none', side='right', padx=1)

    self.HTButton3.configure(text='''Отключить''')
    self.HTButton3.configure(command=delMod)

    self.HTCombobox1 = ttk.Combobox(self.HFrame5)
    self.HTCombobox1.pack(in_=self.HFrame5, anchor='center',
                          expand=1, fill='x', ipady=0, padx=2, side='left')

    self.HTCombobox1.configure(textvariable=listModule)
    self.HTCombobox1.configure(values=[1, 2, 3])
    self.HTCombobox1.bind('<<ComboboxSelected>>', selectMod)

    self.HFrame6 = Frame(self.HLabelframe4)
    self.HFrame6.pack(in_=self.HLabelframe4, anchor='n',
                      expand=1, fill='x', side='top', padx='1mm', pady='0 1mm')

    self.HFrame6.configure(relief=GROOVE)
    self.HFrame6.configure(borderwidth="0")
    self.HFrame6.configure(background="white")

    self.HLabel3 = Label(self.HFrame6)
    self.HLabel3.pack(in_=self.HFrame6, anchor='w', expand=0, fill='x', side='left')

    self.HLabel3.configure(background="white")
    self.HLabel3.configure(text='''Отключаемая библиотека:''')

    self.HEntry3 = ttk.Entry(self.HFrame6)
    self.HEntry3.pack(in_=self.HFrame6, anchor='n',
                      expand=1, fill='x', padx=0, side='right')

    self.HEntry3.configure(background="white")

    self.HLabelframe2 = LabelFrame(self.HLabelframe1)
    self.HLabelframe2.pack(in_=self.HLabelframe1, anchor='n',
                           expand=1, fill='both', padx='1mm 0', pady=0, side='top')
    self.HLabelframe2.configure(relief=GROOVE)
    self.HLabelframe2.configure(borderwidth="0")
    self.HLabelframe2.configure(text='''Информация о модуле, библиотеке и токенах''')
    self.HLabelframe2.configure(background="white")
    self.HLabelframe2.configure(highlightbackground="#c0bab4")

    self.HScrolledtext1 = Text(self.HLabelframe2)
    self.HScrolledtext1.pack(anchor='center', expand=1, fill='both', side='left')
    self.HScrolledtext1.vsb = ttk.Scrollbar(self.HLabelframe2, orient='vertical', command=self.HScrolledtext1.yview)
    self.HScrolledtext1['yscrollcommand'] = self.HScrolledtext1.vsb.set
#    txt['xscrollcommand'] = hsb.set
    self.HScrolledtext1.vsb.pack(side='right', fill='y', padx = 0)

    self.HScrolledtext1.configure(background="white")
    self.HScrolledtext1.configure(highlightbackground="#c0bab4", highlightcolor="#39b5da")
#    self.HScrolledtext1.configure(insertborderwidth="3")
    self.HScrolledtext1.configure(selectbackground="#ddc8a1")
    self.HScrolledtext1.configure(width=10)
    self.HScrolledtext1.configure(height=16)
    root.tk.call('tk', 'busy', 'hold', self1.HLabelframe4)
    root.tk.call('tk', 'busy', 'hold', self1.HLabelframe3)

#        self.HScrolledtext1.configure(wrap=NONE)

def frameTokenCert(self, labelfr, type):
    global viewcert
    global helpview
    global updatecert
    helpview = Label(labelfr, text="Просмотр сертификата", bg='#ffe0a6')
    py = '''2mm'''
    px = 5
    labelfr.SLabelframe3.pack(in_=labelfr, anchor='center',
                              expand=0, fill='x', ipady=3, pady=py, padx=px, side='top')

    labelfr.SLabelframe3.configure(relief=GROOVE)
    labelfr.SLabelframe3.configure(borderwidth="0")
    labelfr.SLabelframe3.configure(text='''Выберите токен и загрузите сертификаты''')
#    labelfr.SLabelframe3.configure(background="#eff0f1")
    labelfr.SLabelframe3.configure(background="white")
#    labelfr.SLabelframe3.configure(width=150)

    labelfr.STCombobox1 = ttk.Combobox(labelfr.SLabelframe3)
    labelfr.STCombobox1.pack(in_=labelfr.SLabelframe3, anchor='center', expand=1, fill='x', side='left', padx=0)

#        labelfr.STCombobox1.configure(textvariable=comboboxTok)

    labelfr.ButtonUp = Button(labelfr.SLabelframe3, image=updatecert, compound='left', relief=FLAT, borderwidth=0)
    labelfr.ButtonUp.pack(in_=labelfr.SLabelframe3, anchor='w', padx=0, expand=0,fill='none',side='right')
    labelfr.ButtonUp.bind('<Enter>', lambda e=labelfr.ButtonUp: showhelp(e, labelfr.ButtonUp, helpview, 'Получить список сертификатов', 'right'))
    labelfr.ButtonUp.bind('<Leave>', lambda e=labelfr.ButtonUp: hidehelp(e, helpview))

    labelfr.SLabelframe4 = LabelFrame(labelfr, font='helvetica 10 bold roman')
    labelfr.SLabelframe4.pack(in_=labelfr, anchor='center',
                              expand=0, fill='x', ipady=2, padx=5, pady='2mm', side='top')

    labelfr.SLabelframe4.configure(relief=GROOVE)
    labelfr.SLabelframe4.configure(borderwidth="0")
    if (type == 1):
        labelfr.SLabelframe4.configure(
            text='''Выберите сертификат получателя''')
    else:
        labelfr.SLabelframe4.configure(
            text='''Выберите личный сертификат подписанта''')

    labelfr.SLabelframe4.configure(background="white")
    labelfr.SLabelframe4.configure(highlightbackground="#c0bab4")
    labelfr.SLabelframe4.configure(width=150)

    labelfr.STCombobox2 = ttk.Combobox(labelfr.SLabelframe4)
    labelfr.STCombobox2.pack(
        in_=labelfr.SLabelframe4, anchor='center', expand=1, fill='x', side='left', padx=0)
    if (type == 1):
        labelfr.ButtonUp.configure(command=(lambda e=labelfr.STCombobox2: loadCert(labelfr.STCombobox2, labelfr)))
        labelfr.STCombobox1.bind('<<ComboboxSelected>>', lambda e=labelfr.STCombobox1: loadCert(labelfr.STCombobox2, labelfr))
    else:
        labelfr.ButtonUp.configure(command=(lambda e=labelfr.STCombobox2: loadKeyCert(e, labelfr.STCombobox2, labelfr)))
        labelfr.STCombobox1.bind('<<ComboboxSelected>>', lambda e=labelfr.STCombobox2: loadKeyCert(e, labelfr.STCombobox2, labelfr))

    labelfr.STButton2 = Button(labelfr.SLabelframe4, image=viewcert, compound='left', relief=FLAT, borderwidth=0)
    labelfr.STButton2.pack(in_=labelfr.SLabelframe4, anchor='center',
                           expand=0, fill='none', padx=5, side='right')
    labelfr.STButton2.bind('<Enter>', lambda e=labelfr.STButton2: showhelp(e, labelfr.STButton2, helpview, 'Просмотр сертификата', 'right'))
    labelfr.STButton2.bind('<Leave>', lambda e=labelfr.STButton2: hidehelp(e, helpview))

#    labelfr.STButton2.configure(text='''Просмотреть''')
    labelfr.STButton2.configure(command=(lambda e=labelfr: viewCert(e)))

def verifyToken (boxtok,frameRequest):
    global patch_win
    tokname = frameRequest.STCombobox1.get()
    typekey = frameRequest.STCombobox2.get()
    if (typekey == "rsa"):
        frameRequest.TCombobox3.configure(values = ["1024","2048","4096","8192"])
        frameRequest.TCombobox3.delete(0, END)
        frameRequest.TCombobox3.insert(END, "2048")
        frameRequest.TCombobox6.delete(0, END)
        frameRequest.TCombobox6.insert(0, "Физическое лицо")
        return
    else:
        cmd_typekey = '"' + patch_win + 'certutil" -G -d "' + NSSname + '" -h "' + tokname + '" -k "' + typekey + '" -q  CHECK'
#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    if sys.platform != "win32":
        id = pexpect.spawn(cmd_typekey)
    else:
        id = pexpect.popen_spawn.PopenSpawn(cmd_typekey, timeout=10)
    ret = -1
    err = -1
    while(True):
        ret = id.expect([entpw, pexpect.EOF, pexpect.TIMEOUT])
        if (ret == 0):
            root.update()
            tname = str(id.after)[29:-3]
            password('', tname, 0)
#            password('', tokname, 0)
            if (readpwok == 0):
                id.close()
                return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            err = 0
        elif (ret == 1):
            break
        elif (ret == 2):
            if sys.platform != "win32":
                id.close()
            return

    res = id.before.decode('UTF-8')
    if sys.platform != "win32":
        id.close()
    ll = str(res.split('\r'))
    if (ll.find ('Generating key.  This may take a few moments') != -1 and err == 0):
        frameRequest.TCombobox3.delete(0, END)
        if (typekey == 'gost3410-2001' or typekey == 'gost3410-12-256'):
            frameRequest.TCombobox3.configure(values = ["A","B","C","XA","XB"])
            frameRequest.TCombobox3.insert(0, "A")
        elif (typekey == 'gost3410-12-512'):
            frameRequest.TCombobox3.configure(values = ["A","B"])
            frameRequest.TCombobox3.insert(0, "A")
        elif (typekey == 'rsa'):
            frameRequest.TCombobox3.configure(values = ["1024","2048","4096","8192"])
            frameRequest.TCombobox3.insert(END, "2048")
        frameRequest.TCombobox4.delete(0, END)
        frameRequest.TCombobox4.insert(0, frameRequest.list_ckzi[1])

        frameRequest.TCombobox5.delete(0, END)
        list_roles = list(oid_roles.keys())
        list_roles.sort()
        frameRequest.TCombobox5.configure(values = list_roles)
        frameRequest.TCombobox5.insert(0, list_roles[11])
        frameRequest.TCombobox6.delete(0, END)
        frameRequest.TCombobox6.insert(0, "Физическое лицо")
    else:
        tkMessageBox.showerror(title="Создание запроса", message='Генерация ключа \n' +
                          typekey + '\n   токеном\n' + tokname + '\nне поддерживается')

def remove_strings(filename, string):
    rst = []
    begin = ''
    with open(filename) as fd:
        t = fd.read()
        for line in t.splitlines():
            if begin == '1':
                rst.append(line)
                continue
            if line.find(string) != -1:
                rst.append(line)
                begin = '1'
    with open(filename, 'w') as fd:
        fd.write('\n'.join(rst))
        fd.write('\n') # with join we lose the last newline char

def random_string(length):
    return ''.join(random.choice(string.ascii_letters) for m in range(length))

def createCSR(frameRequest):
    global patch_win
    global country_inv
    reqFLInv = {
        ' 1. Страна' : 'C',
        ' 2. Регион' : 'ST',
        ' 3. ФИО' : 'CN',
	' 4. Фамилия' : 'SN',
	' 5. Имя, Отчество' : 'givenName',
	' 6. Электронная почта' : 'E',
	' 7. Населенный пункт' : 'L',
	' 8. Улица, номер дома' : 'street',
	' 9. ИНН (10 или 12 символов)' : 'INN',
	'10. СНИЛС (11 символов)' : 'SNILS'}
    reqULInv = {
        ' 1. Страна' : 'C',
        ' 2. Регион' : 'ST',
        ' 3. Организация' : 'CN',
	' 4. Наименование организации' : 'O',
	' 5. Электронная почта' : 'E',
	' 6. Населенный пункт' : 'L',
	' 7. Улица, номер дома' : 'street',
	' 8. Подразделение организации' : 'OU',
	' 9. Должность' : 'title', 
	'10. Фамилия' : 'SN',
	'11. Имя, Отчество' : 'givenName',
	'12. ОГРН (13 символов)' : 'OGRN',
	'13. ИНН (10 или 12 символов)' : 'INN'}
    reqIPInv = {
        ' 1. Страна' : 'C',
        ' 2. Регион' : 'ST',
        ' 3. ФИО' : 'CN',
	' 4. Фамилия' : 'SN',
	' 5. Имя, Отчество' : 'givenName',
	' 6. Электронная почта' : 'E',
	' 7. Населенный пункт' : 'L',
	' 8. Улица, номер дома' : 'street',
	' 9. ИНН (10 или 12 символов)' : 'INN',
	'10. ОГРНИП (15 символов)' : 'OGRNIP',
	'11. СНИЛС (11 символов)' : 'SNILS'}

    reqAssInv = {
        ' 1. Страна' : 'C',
        ' 2. Регион' : 'ST',
        ' 3. Населенного пункта' : 'L',
	' 4. Улица, номер дома' : 'street',
	' 5. Организация' : 'O',
	' 6. Подразделение организации' : 'U',
	' 7. Должность' : 'title',
	' 8. ИНН (10 или 12 символов)' : 'INN',
	' 9. ОГРН (13 символов)' : 'OGRN',
	'10. ОГРНИП (15 символов)' : 'OGRNIP',
	'11. СНИЛС (11 символов)' : 'SNILS',
	'12. КПП (10 символов)' : 'KPP'}

    if (py3 == False):
        vlad  = frameRequest.TCombobox6.get().encode('utf-8')
    else:
        vlad  = frameRequest.TCombobox6.get()

    if vlad == 'Физическое лицо':
        b = self1.TFrameWho[0].entries
        reqInv = reqFLInv
    elif vlad == 'Юридическое лицо':
        b = self1.TFrameWho[2].entries
        reqInv = reqULInv
    elif vlad == 'Индивидуальный предприниматель':
        b = self1.TFrameWho[1].entries
        reqInv = reqIPInv
    else:
        return
    s = ''
    cn_file = ''
    fields_clear = ''
    for a in b:
#Наименование аттрибута
#        print(a[0])
#Его значение
#        print(a[1].get())
        val_oid = a[1].get().strip()
#OID - AVA атрибута
        oid = reqInv[a[0]].strip()
        if (oid == 'CN'):
            cn_file = val_oid
        if (val_oid == ''):
            if (fields_clear != ''):
                fields_clear = fields_clear + ','
            fields_clear = fields_clear + oid
            continue
        if (oid == 'INN'):
            if (val_oid.isdigit() == False):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ИНН (INN) может содержать только Цифры')
                return
            if (len(val_oid) !=  10 and len(val_oid) !=  12):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ИНН (INN) имеет неправильную длину')
                return
        elif (oid == 'SNILS'):
            if (val_oid.isdigit() == False):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут СНИЛС (SNILS) может содержать только Цифры')
                return
            if (len(val_oid) !=  11):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут СНИЛС (SNILS) имеет неправильную длину')
                return
        elif (oid == 'OGRN'):
            if (val_oid.isdigit() == False):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ОГРН (OGRN) может содержать только Цифры')
                return
            if (len(val_oid) !=  13):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ОГРН (OGRN) имеет неправильную длину')
                return
        elif (oid == 'OGRNIP'):
            if (val_oid.isdigit() == False):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ОГРНИП (OGRNIP) может содержать только Цифры')
                return
            if (len(val_oid) !=  15):
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Атрибут ОГРНИП (OGRNIP) имеет неправильную длину')
                return
        elif (oid == 'E'):
            pe = r"^([a-z0-9_.-]+)@(([a-z0-9-]+\.)+[a-z]{2,6})$"
            p = re.compile(pe, re.I | re.S)
            m = p.search(val_oid)
            if not m:
                tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Не верно указан адрес электронной почты (E)')
                return
        elif (oid == 'C'):
            val_oid = country_inv[val_oid]
        if (s != ''):
            s = s + ','
#Экранируем запятую в полях запроса
        s = s + oid + '=' + val_oid.replace(',', '\,')

    if (fields_clear != ''):
        msg = 'У вас имеются незаполненные поля:\n' + fields_clear + '\nБудете их заполнять?'
        answer = tkMessageBox.askyesno(title='Создание запроса на сертификат', message=msg)
        if(answer == True):
            return
#ОБРАБАТЫВАЕМ subjectSignTool
    signtool = frameRequest.TCombobox4.get()
    len_a = len(signtool)
#Длину в байт (len < 128)
    bb = chr(len_a)
#Формируем строку для файла
    if sys.platform != "win32":
        subSignTool = '\x0C' + bb
    else:
        subSignTool = '\x0C' + bb
    if sys.platform != "win32":
        home = os.environ["HOME"]
    else:
        home = os.environ["USERPROFILE"]

    fext = os.path.join(home, 'st_der.der')
    f = open(fext, 'w', encoding='utf-8')
    f.write(subSignTool)
    if sys.platform != "win32":
        f.write(signtool)
    else:
        f.write(signtool)

    f.close()
#Обрабатываем роль
#    role = frameRequest.TCombobox5.get()
    role = ''
#Выбираем oid-ы для роли (i)
    if (role != ''):
        ll = oid_roles[role].split(',')
    else:
        ll = {}
#Формируем <имя>|OID:<точечный oid>
    oidrole = ''
    for  oi in ll :
        if (oidrole != ''):
            oidrole = oidrole + ','
        oid = oi.strip()
        if(oid[0:2] == '1.'):
            oidrole = oidrole + 'OID:' + oid
        else:
            oidrole = oidrole + oid
    if (oidrole != ''):
        oidrole = ' --extKeyUsage ' + oidrole
#Назначение ключа
#    listkey = 'digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,certSigning,crlSigning,critical'
    i = 0
    ku = ''
    for tch in listkey.split(',') :
        rb = tch49[i].get()
        if (rb == '1'):
            if (ku != ''):
                ku = ku + ','
            ku = ku + tch
        i = i + 1
#Формируем команду
    tokname = frameRequest.STCombobox1.get()
    typeKey = frameRequest.STCombobox2.get()
    curve = frameRequest.TCombobox3.get()
    if (typeKey == "rsa"):
        curve_key = ' -g ' + curve
    else:
        curve_key = ' -q ' + curve

    if ku != '':
        ku = ' --keyUsage "' + ku + '"'
    msg='   По умолчанию запрос PKCS#10 сохранится в формате DER.\n\
   Вы хотите сохранить запрос PKCS#10 в формате PEМ?'

    answer = tkMessageBox.askyesnocancel(title='Создание запроса', message=msg)
    if (answer == None):
#Передумали создавать запрос
        return
    if	(answer == True):
#Формат PEM
        cn_file = cn_file + '.csr'
        fcsr = ' -a '
    else:
#Формат DER
        cn_file = cn_file + '.p10'
        fcsr = ' -r '
    filereq = os.path.join(home, cn_file)
    
    tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Создание запроса может занять несколько минут')
    root.update()

#    entpw = 'Enter Password or Pin for "' + tokname + '":'
    entpw = 'Enter Password or Pin for "' + '.*' +'":'
    if sys.platform != "win32":
        cmd_request = '"' + patch_win + 'certutil" -R -d "' + NSSname + '" -h "' + tokname + '" -s "' + s + '" ' + curve_key + ' -k ' + typeKey + \
	    ku + oidrole + ' --extGeneric 1.2.643.100.111:not-critical:"' + fext +'"' + fcsr + ' -o "' + filereq + '"'
        id = pexpect.spawn(cmd_request)
    else:
        cmd_request = '"' + patch_win + 'certutil" -R -d "' + NSSname + '" -h "' + tokname + '" -s "' + s.encode('utf-8').decode('cp1251', errors='replace') + '" ' + curve_key + ' -k ' + typeKey + \
	    ku + oidrole + ' --extGeneric 1.2.643.100.111:not-critical:"' + fext +'"' + fcsr + ' -o "' + filereq + '"'
###############
        filecsr = os.path.join(home, 'createCSR.bat')
        f = open(filecsr, 'w', encoding='utf-8')
        f.write('chcp 1251\n')
        cmd_request_utf8 = '"' + patch_win + 'certutil" -R -d "' + NSSname + '" -h "' + tokname + '" -s "' + s.encode('utf-8').decode('utf-8') + '" ' + curve_key + ' -k ' + typeKey + \
	    ku + oidrole + ' --extGeneric 1.2.643.100.111:not-critical:"'
        f.write(cmd_request_utf8)
        f.close()
        f = open(filecsr, 'a', encoding='cp1251')
        cmd_request_file =  fext.encode('cp1251').decode('cp1251') + '"' + fcsr + ' -o "' + filereq.encode('cp1251').decode('cp1251') + '"'
        f.write(cmd_request_file)
        f.close()
        cmd_request = filecsr
#################
        id = pexpect.popen_spawn.PopenSpawn(cmd_request, timeout=10)
    while(True):
#        ret = id.expect(["\|","Enter Password", pexpect.EOF, pexpect.TIMEOUT, "to continue:", "\*"])
        ret = id.expect(["\|",entpw, pexpect.EOF, pexpect.TIMEOUT, "to continue:", "\*"])
        if (ret == 0 or ret == 5):
            id.send(random_string(1))
            id.send("\r")
            continue
        elif (ret == 1):
            password('', tokname, 0)
            if (readpwok == 0):
                  return
            if sys.platform != "win32":
                id.send(readpw)
                id.send("\r")
            else:
                id.sendline(readpw)
            continue
        elif (ret == 2):
            break
        elif (ret == 3):
            break
        elif (ret == 4):
            if sys.platform != "win32":
                id.send("\r")
            else:
                id.sendline("")
            tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Создание запроса может занять еще несколько минут')
            continue
    if sys.platform != "win32":
        id.close()

############
    if not os.path.exists(filereq):
        tkMessageBox.showerror(title="Создание запроса на сертификат", message='Запрос создать не удалось\nПроверьте исходные данные или PIN-код\n' + s )
#        os.remove(fext)
        return
    if os.path.getsize(filereq) == 0:
        os.remove(filereq)
#        os.remove(fext)
        tkMessageBox.showerror(title="Создание запроса на сертификат", message='Запрос создать не удалось\nПроверьте исходные данные или PIN-код')
        return
#        os.remove(fext)
    if (fcsr == ' -a '):
        string = 'BEGIN NEW CERTIFICATE REQUEST'
        remove_strings(filereq, string)
    tkMessageBox.showinfo(title="Создание запроса на сертификат", message='Запрос на Сертификат\nсоздан и сохранен в файле\n' + '"' + filereq + '"')

def makeform(root, fields):
   entries = []
   for field in fields:
      row = Frame(root)
      lab = Label(row, width=25, background="#00ff7f", text=field, anchor='w')
      ent = Entry(row, width=25, background="white")
      row.pack(side=TOP, fill=X, padx=5, pady=5)
      lab.pack(side=LEFT)
      ent.pack(side=RIGHT, expand=YES, fill=X)
      entries.append((field, ent))
   return entries

def acceptVlad(frameRequest):
    global img_anketa
    global self1
    typeCert = ('Физическое лицо', 'Индивидуальный предприниматель', 'Юридическое лицо')
    reqFL = {'CN' : '1. ФИО',
	'SN' : '2. Фамилия',
	'givenName' : '3. Имя, Отчество',
	'E' : '4. Электронная почта',
	'L' : '5. Населенный пункт',
	'street' : '6. Улица, номер дома',
	'INN' : '7. ИНН (10 или 12 символов)',
	'SNILS' : '8. СНИЛС (11 символов)'}
    reqUL = {'CN' : ' 1. Организация',
	'O' : ' 2. Наименование организации',
	'E' : ' 3. Электронная почта',
	'L' : ' 4. Населенный пункт',
	'street' : ' 5. Улица, номер дома',
	'OU' : ' 6. Подразделение организации',
	'title' : ' 7. Должность',
	'SN' : ' 8. Фамилия',
	'givenName' : ' 9. Имя, Отчество',
	'OGRN' : '10. ОГРН (13 символов)',
	'INN' : '11. ИНН (10 или 12 символов)'}
    reqIP = {'CN' :  '1. ФИО',
	'SN' : '2. Фамилия',
	'givenName' : '3. Имя, Отчество',
	'E' : '4. Электронная почта',
	'L' : '5. Населенный пункт',
	'street' : '6. Улица, номер дома',
	'INN' : '7. ИНН (10 или 12 символов)',
	'OGRNIP' : '8. ОГРНИП (15 символов)',
	'SNILS' : '9. СНИЛС (11 символов)'}
    reqAss = {
	'O' : 'Организация',
	'L' : 'Населенный пункт',
	'street' : 'Улица, номер дома',
	'U' : 'Подразделение организации',
	'title' : 'Должность',
	'INN' : 'ИНН (10 или 12 символов)',
	'OGRN' : 'ОГРН (13 символов)',
	'OGRNIP' : 'ОГРНИП (15 символов)',
	'SNILS' : 'СНИЛС (11 символов)'}

    if (py3 == False):
        vlad  = frameRequest.TCombobox6.get().encode('utf-8')
    else:
        vlad  = frameRequest.TCombobox6.get()

#    self1.Button48.configure(state='normal')
#vlad = ЮрЛицо, ФизЛицо, ИП reqAss зависят от типа 
    if (vlad == "Физическое лицо"):
        self1.TFrame1.pack_forget()
        self1.TFrameWho[0].pack(in_=self1.Frame1,expand=1,fill='both',padx=5,pady=5,side='top')
    elif (vlad == 'Юридическое лицо'):
        self1.TFrame1.pack_forget()
        self1.TFrameWho[2].pack(expand=1,fill='both',padx=5,pady=5,side='top')
    elif (vlad == 'Индивидуальный предприниматель'):
        self1.TFrame1.pack_forget()
        self1.TFrameWho[1].pack(expand=1,fill='both',padx=5,pady=5,side='top')
    else:
        return
    self1.TLabel1.configure(text=''' ИОК/PKI. Заполните нижележащие поля.\n Эта информация будет помещена в сертификат  \n Все поля обязательны для заполнения ''')
    self1.TLabel1.configure(image=img_anketa, compound='left')

#    self1.TLabel1.configure(image=img_svitok, compound='left')

    sys.stdout.flush()


def showhelp (e, w, help, htext, hanchor):
#e - информация о событии
    help.configure(text=htext)
    if (hanchor == 'right') :
        help.place(in_=w, relx='1.0', rely='1.0', anchor='ne')
    elif (hanchor == 'left') :
        help.place(in_=w, relx='1.0', rely='1.0', anchor='nw')
    help.tkraise()
    
def hidehelp (e, help):
    help.place_forget()


def frameCertManager (frameManager):
    global viewcert
    global helpview
    global updatecert
    helpview = Label(frameManager, text="Просмотр сертификата", bg='#ffe0a6')
    frameManager.SLabelframe3 = LabelFrame(frameManager, pady=0, font='helvetica 10 bold roman')
    frameManager.SLabelframe3.pack(expand=0, fill='x', pady='2mm', padx=5, side='top')
    frameManager.SLabelframe3.configure(relief=GROOVE)
    frameManager.SLabelframe3.configure(borderwidth="0")
    frameManager.SLabelframe3.configure(text='''Выберите рабочий токен''')
#    frameManager.SLabelframe3.configure(background="#eff0f1")
    frameManager.SLabelframe3.configure(background="white")
    frameManager.SLabelframe3.configure(highlightbackground="#c0bab4")
    frameManager.STCombobox1 = ttk.Combobox(frameManager.SLabelframe3)
    frameManager.STCombobox1.pack(anchor='center', expand=1, fill='x', side='left', padx=0)
    frameManager.ButtonUp = Button(frameManager.SLabelframe3, image=updatecert, compound='left', relief=FLAT, borderwidth=0)
    frameManager.ButtonUp.pack(anchor='w', padx=0, expand=0,fill='none',side='right')
    frameManager.ButtonUp.bind('<Enter>', lambda e=frameManager.ButtonUp: showhelp(e, frameManager.ButtonUp, helpview, 'Получить список сертификатов', 'right'))
    frameManager.ButtonUp.bind('<Leave>', lambda e=frameManager.ButtonUp: hidehelp(e, helpview))


    frameManager.Labelframe1 = LabelFrame(frameManager, font='helvetica 10 bold roman', padx=0, labelanchor='n')

    frameManager.Labelframe1.pack(expand=0,fill='x', side='top', padx=5, pady='2mm')
    frameManager.Labelframe1.configure(relief=GROOVE)
    frameManager.Labelframe1.configure(borderwidth="0")
    frameManager.Labelframe1.configure(text='''Выберите сертификат X509''')
    frameManager.Labelframe1.configure(background="#eff0f1")
    frameManager.Labelframe1.configure(highlightbackground="#39b5da", highlightthickness='1')
    frameManager.FrameCert = Frame(frameManager.Labelframe1)
    frameManager.FrameCert.pack(in_=frameManager.Labelframe1,expand=0, fill='x', pady='0 2mm', padx='1mm', side='top')

    frameManager.STCombobox2 = ttk.Combobox(frameManager.Labelframe1)
    frameManager.STCombobox2.pack(in_=frameManager.FrameCert,expand=1,fill='x', padx='0', pady='0 5',side='left')
    frameManager.STCombobox1.bind('<<ComboboxSelected>>', lambda e=frameManager.STCombobox2: loadCert(frameManager.STCombobox2, frameManager))
    frameManager.ButtonUp.configure(command=(lambda e=frameManager.STCombobox2: loadCert(frameManager.STCombobox2, frameManager)))

    frameManager.Button2 = Button(frameManager.FrameCert, image=viewcert, compound='left', relief=FLAT, borderwidth=0)
    frameManager.Button2.pack(anchor='w', padx=0, expand=0,fill='none',side='right')
    frameManager.Button2.configure(command=(lambda e=frameManager: viewCert(e)))
    frameManager.Button2.bind('<Enter>', lambda e=frameManager.STCombobox2: showhelp(e, frameManager.Button2, helpview, 'Просмотр сертификата', 'right'))
    frameManager.Button2.bind('<Leave>', lambda e=frameManager.STCombobox2: hidehelp(e, helpview))

    frameManager.Labelframe2 = LabelFrame(frameManager.Labelframe1, bg='#eff0f1')
    frameManager.Labelframe2.configure(highlightbackground="#39b5da", highlightthickness='1')

    frameManager.Labelframe2.pack(expand=0,fill='both',side='bottom', pady = 5, padx = '1mm')
    frameManager.Labelframe2.configure(relief=GROOVE)
    frameManager.Labelframe2.configure(borderwidth="0")
    frameManager.Labelframe2.configure(labelanchor='n', text='''Экспортировать сертификат''')
    frameManager.Labelframe2.configure(padx="5")
    frameManager.Labelframe2.configure(pady="5")
#Блокируем фрейм
    frameManager.Labelframe2.tk.call('tk', 'busy', 'hold', frameManager.Labelframe2)

    frameManager.TRadiobutton1 = ttk.Radiobutton(frameManager.Labelframe2)

    frameManager.TRadiobutton1.pack(expand=0,fill='none',side='left')
    frameManager.TRadiobutton1.configure(variable=typeExport)
    frameManager.TRadiobutton1.configure(value="0")
    frameManager.TRadiobutton1.configure(text='''в формате PEM''')

    frameManager.TRadiobutton2 = ttk.Radiobutton(frameManager.Labelframe2)
    frameManager.TRadiobutton2.pack(anchor='center',expand=0,fill='none',side='left', padx=5)
    frameManager.TRadiobutton2.configure(variable=typeExport)
    frameManager.TRadiobutton2.configure(value="1")
    frameManager.TRadiobutton2.configure(text='''в формаге DER''')

    frameManager.TButton1 = ttk.Button(frameManager.Labelframe2, command=(lambda e=frameManager: exportCert(e, frameManager.Labelframe2)))
    frameManager.TButton1.pack(anchor='center',expand=0,fill='none',side='right' )
    frameManager.TButton1.configure(text='''Экспортировать''')

    frameManager.Button1 = ttk.Button(frameManager.Labelframe1, command=(lambda e=frameManager: deleteCert(e)))
    frameManager.Button1.configure(text='Удалить X509', padding='0 4')
    frameManager.Button1.pack(anchor='center',expand=0,fill='none',side='right', padx='0 1mm')

    frameManager.Button3 = ttk.Button(frameManager.Labelframe1, text='Сменить метку', padding='0 4')
    frameManager.Button3.pack(anchor='center',expand=0,fill='none',side='left', padx='1mm')
    frameManager.Button3.configure(command=(lambda e=frameManager: rename(e)))

    frameManager.Button4 = ttk.Button(frameManager.Labelframe1,text='Экспорт в PKCS#12', padding='0 4')
    frameManager.Button4.pack(expand=0,fill='none',side='left')
    frameManager.Button4.configure(command=(lambda e=frameManager: exportP12(e)))

    frameManager.Button5 = ttk.Button(frameManager.Labelframe1,text='Экспорт в файл', padding='0 4')
    frameManager.Button5.pack(expand=0,fill='none',side='left', padx='1mm')
#Разблокируем фрейм
    frameManager.Button5.configure(command=(lambda e=frameManager: frameManager.Labelframe2.tk.call('tk', 'busy', 'forget', frameManager.Labelframe2)))
###############
    frameManager.Labelframe3 = LabelFrame(frameManager, pady=0, padx=5)
    frameManager.Labelframe3.pack(anchor='center',expand=0,fill='x',side='top', padx='1mm', pady='0 2mm')
    frameManager.Labelframe3.configure(relief=GROOVE)
    frameManager.Labelframe3.configure(borderwidth="0")
    frameManager.Labelframe3.configure(highlightbackground="#39b5da", highlightthickness='1')

    frameManager.Labelframe3.configure(labelanchor='n', text='''Импортировать в рабочий токен''')
    frameManager.Labelframe3.configure(background="#eff0f1")

    frameManager.ButtonImport = ttk.Button(frameManager.Labelframe3,text='Импортировать сертификат', command=(lambda e=frameManager: importCert(e)))

    frameManager.Labelframe4 = LabelFrame(frameManager.Labelframe3, text='''Доверять сертификату при идентификации''', pady="5", bg='#e0e0da')
    frameManager.Labelframe4.configure(relief=GROOVE)
    frameManager.Labelframe4.configure(borderwidth="3")
#    frameManager.Labelframe4.configure(background="#c0bab4")
    frameManager.Labelframe4.configure(highlightbackground="#c0bab4")

    frameManager.TCheckbutton1 = ttk.Checkbutton(frameManager.Labelframe4, text='''Веб-сайтов''')
    frameManager.TCheckbutton1.pack(anchor='w',expand=1,fill='none',side='top',pady='0 3')
    frameManager.TCheckbutton1.configure(variable=catch56)

    frameManager.TCheckbutton2 = ttk.Checkbutton(frameManager.Labelframe4, text='''Пользователей E-mail''')
    frameManager.TCheckbutton2.pack(anchor='w',expand=1,fill='none',side='top')
    frameManager.TCheckbutton2.configure(variable=catch57)

    frameManager.TCheckbutton3 = ttk.Checkbutton(frameManager.Labelframe4, text='''Производителей ПО''')
    frameManager.TCheckbutton3.pack(anchor='w',expand=0,fill='none',side='left',pady=3)
    frameManager.TCheckbutton3.configure(variable=catch58)

    frameManager.TButton2 = ttk.Button(frameManager.Labelframe4, text='''Импорт CA''', command=(lambda e=frameManager: importCert(e)))
    frameManager.TButton2.pack(anchor='center',expand=0,fill='none',padx=5,side='right')
#############
    frameManager.TButton3 = ttk.Button(frameManager.Labelframe4, text='''Просмотреть CA''', command=(lambda e=frameManager: viewCertOrCSR(e, 1)))
    frameManager.TButton3.pack(anchor='center',expand=0,fill='none',padx=5,side='right')

    frameManager.FrameRadio = Frame(frameManager.Labelframe3, bg='#e0e0da', padx=5, pady=1)

#############
    frameManager.TRadiobutton3 = ttk.Radiobutton(frameManager.FrameRadio)
    frameManager.TRadiobutton3.pack(anchor='center',expand=1,fill='x',side='left')
    frameManager.TRadiobutton3.configure(variable=typeImport)
    frameManager.TRadiobutton3.configure(value="0")
    frameManager.TRadiobutton3.configure(text='''Сертификат''')
    frameManager.TRadiobutton3.configure(command=(lambda e=frameManager: typeImportCert(0, e)))

    frameManager.TRadiobutton4 = ttk.Radiobutton(frameManager.FrameRadio)
    frameManager.TRadiobutton4.pack(anchor='center',expand=1,fill='x',side='left', padx=5)
    frameManager.TRadiobutton4.configure(variable=typeImport)
    frameManager.TRadiobutton4.configure(text='''CA''')
    frameManager.TRadiobutton4.configure(command=(lambda e=frameManager: typeImportCert(1, e)))

    frameManager.TRadiobutton5 = ttk.Radiobutton(frameManager.FrameRadio)
    frameManager.TRadiobutton5.pack(anchor='e',expand=0,fill='none',side='right')
    frameManager.TRadiobutton5.configure(variable=typeImport)
    frameManager.TRadiobutton5.configure(value="2")
    frameManager.TRadiobutton5.configure(text='''Контейнер PKCS#12''')
    frameManager.TRadiobutton5.configure(command=(lambda e=frameManager: typeImportCert(2, e)))
    frameManager.FrameRadio.pack(side='top', fill='x', expand=1, ipadx=0, ipady=5,pady=2, padx=0)
#    frameManager.ButtonImport.pack(anchor='n', expand=0, fill='none',side='left', pady=15)
    frameManager.ButtonViewCert = ttk.Button(frameManager.Labelframe3,text='Просмотреть сертификат из файла', command=(lambda e=frameManager: viewCertOrCSR(e, 1)))
#    frameManager.ButtonViewCert.pack(anchor='n', expand=0, fill='none',side='left', pady=15)
    frameManager.CAP12 = LabelFrame(frameManager.Labelframe3, text='''Доверять корневому сертификату при идентификации''', pady="5", bg='#e0e0da')
    frameManager.CAP12.configure(relief=GROOVE)
    frameManager.CAP12.configure(borderwidth="2")
    frameManager.CAP12.configure(highlightbackground="#c0bab4")

    frameManager.Checkbutton1P12 = ttk.Checkbutton(frameManager.CAP12, text='Веб-сайтов')
    frameManager.Checkbutton1P12.pack(anchor='nw',expand=1,fill='none',side='left',pady='1mm',padx='1mm')
    frameManager.Checkbutton1P12.configure(variable=catch56)

    frameManager.Checkbutton2P12 = ttk.Checkbutton(frameManager.CAP12, text='Пользователей E-mail')
    frameManager.Checkbutton2P12.pack(anchor='nw',expand=1,fill='none',pady='1mm',side='left')
    frameManager.Checkbutton2P12.configure(variable=catch57)

    frameManager.Checkbutton3P12 = ttk.Checkbutton(frameManager.CAP12, text='Производителей ПО')
    frameManager.Checkbutton3P12.pack(anchor='nw',expand=0,fill='none',side='right',pady='1mm', padx='1mm')
    frameManager.Checkbutton3P12.configure(variable=catch58)
###################
    labelfr = frameManager
    labelfr.SLabelframe5 = LabelFrame(labelfr, font='helvetica 10 bold roman')
    labelfr.SLabelframe5.pack(in_=frameManager.Labelframe3, anchor='center',
                              expand=1, fill='x', padx='1mm', pady='1mm', side='top')

    labelfr.SLabelframe5.configure(relief=GROOVE)
    labelfr.SLabelframe5.configure(borderwidth="0")
    labelfr.SLabelframe5.configure(background="#eff0f1")
    labelfr.SLabelframe5.configure(highlightbackground="#c0bab4")
    labelfr.SLabelframe5.configure(width=150)

    labelfr.SEntry1 = ttk.Entry(labelfr.SLabelframe5)
    labelfr.SEntry1.pack(in_=labelfr.SLabelframe5, anchor='center',
                         expand=1, fill='x', side='left', padx=0)

    labelfr.SEntry1.configure(background="white")

    labelfr.STButton3 = Button(labelfr.SLabelframe5, relief=FLAT, image=selectdir)
    labelfr.STButton3.pack(in_=labelfr.SLabelframe5, anchor='center',
                           expand=0, fill='none', padx=5, side='right')
    labelfr.STButton3.bind('<Enter>', lambda e=labelfr.STButton3: showhelp(e, labelfr.STButton3, helpview, 'Выбор файла', 'right'))
    labelfr.STButton3.bind('<Leave>', lambda e=labelfr.STButton3: hidehelp(e, helpview))

#    frameManager.ButtonImport.pack_forget()
#    frameManager.ButtonViewCert.pack_forget()
    typeImportCert(0, frameManager)

def readdistr(url, w):
    print('readdistr=' + url)
    pass

def openURL(url):
    webbrowser.open_new_tab(url)

def seturl(txt, w, url, tag):
#    print("seturl=" + url + tag )
    if (txt.winfo_depth() > 1):
        txt.tag_configure(tag, background = '#43ce80', relief='raised', borderwidth=1)
    else:
        txt.tag_configure(tag, background = 'black', foreground='white')
    w.delete(0, END)
    w.insert(END, url)

def clearurl(txt, w, tag):
#    print("clearurl=" + tag )
#    w.delete(0, END)
    if (txt.winfo_depth() > 1):
        txt.tag_configure(tag, background = '', foreground='red', relief='flat', underline='on')
    else:
        txt.tag_configure(tag, background = '', foreground='')
    pass

def frameCreateToken(frameInfo):
    global img_creator
    global entryd

    entryd = StringVar()
    entryd.set = 'EntryD'
    print ('frameCreateToken')
    txt = Text(frameInfo, bg="white", wrap='word', padx='1mm', relief='flat', bd=0, highlightthickness=0,highlightbackground='white', highlightcolor='white')
    vsb = ttk.Scrollbar(frameInfo, orient='vertical', command=txt.yview)
    txt['yscrollcommand'] = vsb.set
    vsb.pack(anchor='center',  expand=0, fill='y', side='right', pady='0 15mm')
    txt.pack(anchor='n', expand=1, fill='both', side='top', pady='1mm 0')
    lab = Entry(frameInfo, textvariable=entryd,highlightthickness=1,highlightbackground='skyblue', highlightcolor='skyblue')
    lab.pack(side='top',pady=0,fill='x', expand=1, padx=0,anchor='center', ipady=2)
    lab.insert(END, 'ENTRY')
    txt.image_create("current", image=img_creator)
    fbold = "-family Times -size 10 -weight bold -slant italic"
    url={}
    url['d1'] = "http://soft.lissi.ru/ls_product/skzi/PKCS11"
    url['d2'] = "https://github.com/a513/GuiCreateLS11SW2016Token/raw/master/distr/guicreate_sw_token_linux32.tar.bz2"
    url['d3'] = "https://github.com/a513/GuiCreateLS11SW2016Token/raw/master/distr/guicreate_sw_token_linux64.tar.bz2"
    url['d4'] = "https://github.com/a513/GuiCreateLS11SW2016Token/raw/master/distr/guicreate_sw_token_mac.tar.bz2"
    url['d5'] = "https://github.com/a513/GuiCreateLS11SW2016Token/raw/master/distr/guicreate_sw_token_win32.exe"
    url['d6'] = "https://github.com/a513/GuiCreateLS11SW2016Token/raw/master/distr/guicreate_sw_token_win64.exe"
    url['d7'] = "http://soft.lissi.ru/ls_product/skzi/LS11SW2016/"
    url['d8'] = "http://soft.lissi.ru/solution/ls11cloud"
    url['d9'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/guils11cloud_conf_linux32.tar.bz2"
    url['d10'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/guils11cloud_conf_linux64.tar.bz2"
    url['d11'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/guils11cloud_conf_mac.tar.bz2"
    url['d12'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/guils11cloud_conf_win32.exe"
    url['d13'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/guils11cloud_conf_win64.exe"
    url['d14'] = "https://github.com/a513/guils11cloud_config/raw/master/distr/AndroWishApp-debug.apk"
    txt.tag_configure('tagLoad', foreground='blue', font='Times 11 bold italic')
    txt.tag_configure('tagLoad1', foreground='blue', font='Times 10 bold italic')

    for tag in  ['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'd10', 'd11', 'd12', 'd13', 'd14']:
#        print ('D=' + tag)
        txt.tag_bind(tag, "<Any-Enter>", (lambda event, e=url[tag], tag1=tag: seturl(txt, lab, e, tag1)))
        txt.tag_configure(tag, foreground='red', underline='on')
        txt.tag_bind(tag, "<Any-Leave>", (lambda event, e=lab, tag1=tag: clearurl(txt, e, tag1)))
#Запуск браузера
        txt.tag_bind(tag, '<1>', (lambda event, e=url[tag]: openURL(e)))

    its = txt.index('insert')
    txt.insert (END,  "\t  Графическая оболочка для Network Security Services (NSS)\n\n")
    ite = txt.index('insert')
    txt.tag_add('tagLoad', its, ite)
    txt.insert(END, "       Если вы хотите работать с российской криптографией и у вас нет \
  соответствующего токена , не огорчайтесь. \
  \n       Вы можете создать на своем компьютере программный токен LS11SW2016, либо подключиться к облачному \
  токену LS11CLOUD с полной поддержкой российских криптоалгоритмом.\
  \n       Это позволит вам не только обучиться, но и, при желании,  организовать Инфраструктуру Открытых Ключей \
  (ИОК/PKI) в вашей организации или с коллегами")
    txt.insert(END, "\n\n")
    txt.insert(END, "1. Создание программного токена ")
    its = txt.index('insert')
    txt.insert(END, "LS11SW2016")
    ite = txt.index('insert')
    txt.tag_add('d1', its, ite)
    txt.insert(END, " (утилита guicreate_sw_token)")
    txt.insert(END, "\n\n")

    its_sw = txt.index('insert')
    txt.insert(END, "        Утилита guicreate_sw_token функционирует на ОС Linux, MS Windows, MacOS и др.")
    ite_sw = txt.index('insert')
    txt.tag_add('tagLoad1', its_sw, ite_sw)
    txt.insert(END, "\n")
    txt.insert(END, "        Загрузить дистрибутивыы для платформ Linux, MS Windows, OS X можно ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'здесь:' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('tagLoad', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'Linux32' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d2', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'Linux64' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d3', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'OS X' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d4', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'WIN32' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d5', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'WIN64' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d6', its_sw1, ite_sw1)
    txt.insert(END, "\n")

    txt.insert(END, "        При необходимости распакуйте дистрибутив и запустите его. В дальнейшем следуйте его подсказкам. \
  Вы можете также воспользоваться ")

    its_sw1 = txt.index('insert')
    txt.insert(END, "инструкцией")
    ite_sw1 = txt.index('insert')
    txt.tag_add('d7', its_sw1, ite_sw1)
    txt.insert(END, "\n")
    its_sw1 = txt.index('insert')
    txt.insert(END, "        P.S. На платформе Android программный токен создается автоматически при первом запуске приложения")
    ite_sw1 = txt.index('insert')
    txt.tag_add('tagLoad1', its_sw1, ite_sw1)
    txt.insert(END, ".\n\n")

    txt.insert(END, "2. Подключение к облачному токену ")
    its1 = txt.index('insert')
    txt.insert(END, "LS11Cloud")
    ite1 = txt.index('insert')
    txt.tag_add('d8', its1, ite1)
    txt.insert(END, " (утилита guils11cloud_conf)")
    txt.insert(END, "\n\n")

    its_sw = txt.index('insert')
    txt.insert(END, "        Утилита guils11cloud_conf функционирует на ОС Linux, MS Windows, MacOS, Android и др.")
    ite_sw = txt.index('insert')
    txt.tag_add('tagLoad1', its_sw, ite_sw)
    txt.insert(END, "\n")
    txt.insert(END, "        Загрузить дистрибутивыы для платформ Linux, MS Windows, OS X, Android можно ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'здесь:' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('tagLoad', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'Linux32' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d9', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'Linux64' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d10', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")

    its_sw1 = txt.index('insert')
    txt.insert(END, 'OS X' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d11', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'WIN32' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d12', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'WIN64' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d13', its_sw1, ite_sw1)
    txt.insert(END, "\n\t - ")
    its_sw1 = txt.index('insert')
    txt.insert(END, 'AndroWishApp-debug.apk' )
    ite_sw1 = txt.index('insert')
    txt.tag_add('d14', its_sw1, ite_sw1)
    txt.insert(END, "\n")

    txt.insert(END, "        При необходимости распакуйте дистрибутив и запустите его. В дальнейшем следуйте его подсказкам. \
  Вы можете также воспользоваться ")
    its_sw1 = txt.index('insert')
    txt.insert(END, "инструкцией")
    ite_sw1 = txt.index('insert')
    txt.tag_add('d8', its_sw1, ite_sw1)
    txt.insert(END, "\n")


def frameCreateReq(frameRequest):
    frameRequest.Labelframe2 = LabelFrame(frameRequest, text='''Выберите токен для генерации ключа''',bd=0)

    frameRequest.Labelframe2.pack(anchor='center',expand=0,fill='x',padx=5,pady='1mm',side='top')
    frameRequest.Labelframe2.configure(relief=GROOVE)
    frameRequest.Labelframe2.configure(background="white")

    frameRequest.STCombobox1 = ttk.Combobox(frameRequest.Labelframe2)

    frameRequest.STCombobox1.pack(anchor='center',expand=0,fill='x',padx=0,pady='0 1mm',side='top')

    frameRequest.Labelframe3 = LabelFrame(frameRequest,text='''Выберите тип ключа и его параметры''', bd=0)

    frameRequest.Labelframe3.pack(anchor='center', expand=0,fill='x',padx=5,pady=0,side='top')
    frameRequest.Labelframe3.configure(relief=GROOVE)
    frameRequest.Labelframe3.configure(background="white")

    frameRequest.STCombobox2 = ttk.Combobox(frameRequest.Labelframe3)
    frameRequest.STCombobox2.bind('<<ComboboxSelected>>', lambda e=frameRequest.STCombobox1: verifyToken(e, frameRequest))
    frameRequest.STCombobox2.pack(anchor='center',expand=1,fill='x',padx=0,pady='0 1mm',side='left')
    frameRequest.value_list = ["gost3410-12-256","gost3410-12-512","gost3410-2001","rsa"]
    frameRequest.STCombobox2.configure(values=frameRequest.value_list)
#    frameRequest.TCombobox2.configure(textvariable=create_REQ_support.combobox1)

    frameRequest.TCombobox3 = ttk.Combobox(frameRequest.Labelframe3)

    frameRequest.TCombobox3.pack(anchor='center',expand=1,fill='none',padx='5 0',pady='0 1mm',side='top')
#    frameRequest.TCombobox3.configure(textvariable=create_REQ_support.combobox)

    frameRequest.Labelframe4 = LabelFrame(frameRequest, bd=0)
    frameRequest.Labelframe4.pack(anchor='center',expand=0,fill='x',padx=5,pady=5,side='top')
    frameRequest.Labelframe4.configure(relief=GROOVE)
    frameRequest.Labelframe4.configure(text='''Укажите используемое СКЗИ (subjectSignTool)''')
    frameRequest.Labelframe4.configure(background="white")

    frameRequest.TCombobox4 = ttk.Combobox(frameRequest.Labelframe4)
    frameRequest.TCombobox4.pack(anchor='center',expand=0,fill='x',padx=0,pady='0 1mm',side='top')
    frameRequest.list_ckzi = ["СКЗИ \"ЛИРССЛ-CSP\"", "Укажите наименование вашего СКЗИ",]
    frameRequest.TCombobox4.configure(values=frameRequest.list_ckzi)
#    frameRequest.TCombobox4.configure(textvariable=create_REQ_support.combobox2)

    frameRequest.Labelframe5 = LabelFrame(frameRequest,text='''Выберите назначение ключа''', bd=0)
    frameRequest.Labelframe5.pack(anchor='center',expand=0,fill='x',padx=5,pady=0,side='top')
    frameRequest.Labelframe5.configure(relief=GROOVE)
    frameRequest.Labelframe5.configure(background="white")

    frameRequest.TCombobox5 = ttk.Combobox(frameRequest.Labelframe5)
#    frameRequest.TCombobox5.pack(anchor='center',expand=0,fill='x',padx=0,pady='0 1mm',side='top')
#    frameRequest.TCombobox5.configure(textvariable=create_REQ_support.combobox)

    frameRequest.Frame1 = Frame(frameRequest.Labelframe5)
    frameRequest.Frame1.pack(in_=frameRequest.Labelframe5,anchor='center',expand=1,fill='x',padx=0,pady=5,side='left')
#    frameRequest.Frame1.pack(anchor='center',expand=0,fill='x',padx=5,pady=5,side='top')
    frameRequest.Frame1.configure(relief=GROOVE)
    frameRequest.Frame1.configure(borderwidth="2")
    frameRequest.Frame1.configure(relief=GROOVE)
    frameRequest.Frame1.configure(background="white")

    frameRequest.Frame2 = Frame(frameRequest.Labelframe5)
    frameRequest.Frame2.pack(in_=frameRequest.Labelframe5,anchor='center',expand=1,fill='x',padx='5 0',pady=5,side='left')
    frameRequest.Frame2.configure(relief=GROOVE)
    frameRequest.Frame2.configure(borderwidth="2")
    frameRequest.Frame2.configure(relief=GROOVE)
    frameRequest.Frame2.configure(background="white")

#    listkey = 'digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,certSigning,crlSigning,critical'
    i = 0
    for tch in listkey.split(',') :
        if (i == 0):
            fRF = frameRequest.Frame1
        elif (i == 4):
            fRF = frameRequest.Frame2
        if (i < 4):
            tch49[i].set('1')
        else:
            tch49[i].set('0')
        frameRequest.TCheckbutton1 = ttk.Checkbutton(fRF)
        frameRequest.TCheckbutton1.pack(anchor='center',expand=1,fill='x',side='top')
        frameRequest.TCheckbutton1.configure(variable=tch49[i])
        frameRequest.TCheckbutton1.configure(text=tch)
        i = i + 1

    frameRequest.Labelframe6 = LabelFrame(frameRequest,bd=0,text='''Сведения о заявителе''')
    frameRequest.Labelframe6.pack(anchor='center',expand=0,fill='x',padx='1mm',pady='1mm',side='top')
    frameRequest.Labelframe6.configure(relief=GROOVE)
    frameRequest.Labelframe6.configure(background="white")

    frameRequest.TCombobox6 = ttk.Combobox(frameRequest.Labelframe6)
    frameRequest.TCombobox6.pack(anchor='center',expand=1,fill='x',padx=0,pady='0 1mm',side='left')
    frameRequest.list_who = ["Физическое лицо","Юридическое лицо","Индивидуальный предприниматель",]
    frameRequest.TCombobox6.configure(values=frameRequest.list_who)

    frameRequest.TButton1 = ttk.Button(frameRequest.Labelframe6)
    frameRequest.TButton1.pack(anchor='w',expand=0,fill='none',padx='1mm',side='top',pady=2)
    frameRequest.TButton1.configure(text='''Заполняем форму''')
    frameRequest.TButton1.configure(command=(lambda e=frameRequest: acceptVlad(e)))
    frameRequest.TButton1.bind('<Enter>', lambda e=frameRequest.TButton1: showhelp(e, frameRequest.TButton1, helpview, 'Заполнить форму для выбранного заявиткля', 'right'))
    frameRequest.TButton1.bind('<Leave>', lambda e=frameRequest.TButton1: hidehelp(e, helpview))

    frameRequest.TButton2 = ttk.Button(frameRequest)
    frameRequest.TButton2.pack(anchor='center',expand=0,fill='none',padx=5,pady=5,side='left')
    frameRequest.TButton2.configure(text='''Создать заявку''')
    frameRequest.TButton2.configure(command=(lambda e=frameRequest: createCSR(e)))

    frameRequest.TButton3 = ttk.Button(frameRequest, command=(lambda e=frameRequest: viewCertOrCSR(e, 0)))
    frameRequest.TButton3.pack(anchor='center',expand=0,fill='none',pady=5,side='left')
    frameRequest.TButton3.configure(text='''Просмотреть заявку''')

    frameRequest.TButton4 = ttk.Button(frameRequest)
    frameRequest.TButton4.pack(anchor='center',expand=0,fill='none',padx=5,pady=5,side='right')
    frameRequest.TButton4.configure(text='''Отправить заявку в УЦ''')

def clock():
    global labcl
    a = time.localtime(time.time())
    labcl.configure(text="%02d.%02d.%04d %02d:%02d:%02d" % (a.tm_mday, a.tm_mon, a.tm_year, a.tm_hour, a.tm_min, a.tm_sec))
    labcl.after(200,clock)

def frameSignFile(self, labelfr, type):
    global borderImageData
    # type 0 - sign, 1 - cipher
    global SignBox1
    global selectdir
    global helpview
#    _bgcolor = '#c0bab4'  # X11 color: '#c0bab4'
    _bgcolor = 'white'  # X11 color: '#c0bab4'
    _fgcolor = '#000000'  # X11 color: 'black'
    _compcolor = '#b2c9f4'  # Closest X11 color: 'SlateGray2'
    _ana1color = '#eaf4b2'  # Closest X11 color: '{pale goldenrod}'
#    _ana2color = '#f4bcb2'  # Closest X11 color: 'RosyBrown2'
    _ana2color = '#e0e0da'  # Closest X11 color: 'RosyBrown2'
    font10 = "-family monospace -size -12 -weight normal -slant "  \
        "roman -underline 0 -overstrike 0"
    font9 = "-family sans-serif -size -12 -weight normal -slant "  \
        "roman -underline 0 -overstrike 0"

#        self.SLabelframe1 = labelfr

    if (type == 0 or type == 3):
        labelfr.SLabelframe2 = LabelFrame(labelfr, font='helvetica 10 bold roman')
        labelfr.SLabelframe2.pack(
            in_=labelfr, anchor='center', expand=0, fill='none', pady='2mm', side='top')

        labelfr.SLabelframe2.configure(labelanchor="w")
#        	labelfr.SLabelframe2.configure(relief=GROOVE)
        labelfr.SLabelframe2.configure(relief=FLAT)
        labelfr.SLabelframe2.configure(borderwidth="0")
        if(type == 0):
            labelfr.SLabelframe2.configure(text='Тип подписи:')
        else:
            labelfr.SLabelframe2.configure(text='Извлечь из')
#        labelfr.SLabelframe2.configure(background="#c0bab4")
        labelfr.SLabelframe2.configure(background="white")
        labelfr.SLabelframe2.configure(highlightbackground="#c0bab4")
        labelfr.SLabelframe2.configure(pady="3")
        labelfr.SLabelframe2.configure(width=150)

        self.style.map('TRadiobutton', background=[
                       ('selected', _bgcolor), ('active', _ana2color), ('!active', _bgcolor)])
        labelfr.STRadiobutton1 = ttk.Radiobutton(labelfr.SLabelframe2)
        labelfr.STRadiobutton1.pack(in_=labelfr.SLabelframe2, anchor='center',
                                    expand=0, fill='none', ipadx=10, side='left', padx=3)


        if(type == 0):
            labelfr.STRadiobutton1.configure(variable=typeSign)
            labelfr.STRadiobutton1.configure(text='''Присоединенная''')
        elif (type == 3):
            labelfr.STRadiobutton1.configure(command=(lambda e=labelfr: ejectOrig(e)))
            labelfr.STRadiobutton1.configure(variable=typeEject)
            labelfr.STRadiobutton1.configure(text='''присоединенной ЭП''')
        labelfr.STRadiobutton1.configure(value="1")

        labelfr.STRadiobutton2 = ttk.Radiobutton(labelfr.SLabelframe2)
        labelfr.STRadiobutton2.pack(
            in_=labelfr.SLabelframe2, anchor='center', expand=0, fill='none', side='left', padx=3)

        if(type == 0):
            labelfr.STRadiobutton2.configure(variable=typeSign)
            labelfr.STRadiobutton2.configure(text='''Отсоединенная''')
        elif(type == 3):
            labelfr.STRadiobutton2.configure(command=(lambda e=labelfr: ejectOrig(e)))
            labelfr.STRadiobutton2.configure(variable=typeEject)
            labelfr.STRadiobutton2.configure(text='''зашифрованного файла''')
        labelfr.STRadiobutton2.configure(value="0")

    labelfr.SLabelframe3 = LabelFrame(labelfr, font='helvetica 10 bold roman')

    if (type == 0 or type == 1):
        frameTokenCert(self, labelfr, type)
    else:
        if (type != 3):
            labelfr.configure(pady=30)


    labelfr.SLabelframe5 = LabelFrame(labelfr, font='helvetica 10 bold roman')
    labelfr.SLabelframe5.pack(in_=labelfr, anchor='center',
                              expand=0, fill='x', ipady=2, padx=5, pady=2, side='top')

    labelfr.SLabelframe5.configure(relief=GROOVE)
    labelfr.SLabelframe5.configure(borderwidth="0")
    if (type == 1):
        labelfr.SLabelframe5.configure(text='''Шифруемый файл''')
    elif (type == 0):
        labelfr.SLabelframe5.configure(text='''Подписываемый файл''')
    elif (type == 2):
        labelfr.SLabelframe5.configure(text='''Оригинальный файл''')
    elif (type == 3):
        labelfr.SLabelframe5.configure(text='''Подписанный файл (.p7s)''')
    elif (type == 4):
        labelfr.SLabelframe5.configure(text='''Зашифрованный файл (.p7m)''')
    labelfr.SLabelframe5.configure(background="white")
    labelfr.SLabelframe5.configure(highlightbackground="#c0bab4")
    labelfr.SLabelframe5.configure(width=150)

    labelfr.SEntry1 = ttk.Entry(labelfr.SLabelframe5)
    labelfr.SEntry1.pack(in_=labelfr.SLabelframe5, anchor='center',
                         expand=1, fill='x', side='left', padx=0)

    labelfr.SEntry1.configure(background="white")
#    labelfr.SEntry1.configure(disabledforeground="#bfa284")
#    labelfr.SEntry1.configure(font=font10)
#    labelfr.SEntry1.configure(highlightbackground="#c0bab4")
#    labelfr.SEntry1.configure(selectbackground="#c4c4c4")

    labelfr.STButton3 = Button(labelfr.SLabelframe5, relief=FLAT, image=selectdir)
    labelfr.STButton3.pack(in_=labelfr.SLabelframe5, anchor='center',
                           expand=0, fill='none', padx=5, side='right')
    labelfr.STButton3.bind('<Enter>', lambda e=labelfr.STButton3: showhelp(e, labelfr.STButton3, helpview, 'Выбор файла', 'right'))
    labelfr.STButton3.bind('<Leave>', lambda e=labelfr.STButton3: hidehelp(e, helpview))


#    labelfr.STButton3.configure(text='''Выбрать''')
    labelfr.STButton3.configure(
        command=(lambda e=labelfr.SEntry1: selectFile(e, type)))

    labelfr.SLabelframe6 = LabelFrame(labelfr, font='helvetica 10 bold roman')
    labelfr.SLabelframe6.pack(in_=labelfr, anchor='center',
                              expand=0, fill='x', ipady=2, padx=5, pady='2mm', side='top')

    labelfr.SLabelframe6.configure(relief=GROOVE)
    labelfr.SLabelframe6.configure(borderwidth="0")
    texth = 'Выбор каталога'
    if (type == 1):
        labelfr.SLabelframe6.configure(text='''Каталог для зашифрованного файла (.p7m)''')
    elif (type == 0):
        labelfr.SLabelframe6.configure(text='''Каталог для файла с подписью (.p7s)''')
    elif (type == 2):
        labelfr.SLabelframe6.configure(text='''Файл с подписью (.p7s)''')
        texth = 'Выбор файла'
    elif (type == 3):
        labelfr.SLabelframe6.configure(text='''Каталог для оригинального файла''')
    elif (type == 4):
        labelfr.SLabelframe6.configure(text='''Каталог для расшифрованного файла''')

    labelfr.SLabelframe6.configure(background="white")
    labelfr.SLabelframe6.configure(highlightbackground="#c0bab4")
#    labelfr.SLabelframe6.configure(width=150)

    labelfr.SEntry2 = ttk.Entry(labelfr.SLabelframe6)
    labelfr.SEntry2.pack(in_=labelfr.SLabelframe6, anchor='center',
                         expand=1, fill='x', side='left', padx=0)


    labelfr.STButton4 = Button(labelfr.SLabelframe6, relief=FLAT)
    labelfr.STButton4.pack(in_=labelfr.SLabelframe6, anchor='center',
                           expand=0, fill='none', padx=5, side='right')
    labelfr.STButton4.bind('<Enter>', lambda e=labelfr.STButton4: showhelp(e, labelfr.STButton4, helpview, texth, 'right'))
    labelfr.STButton4.bind('<Leave>', lambda e=labelfr.STButton4: hidehelp(e, helpview))

    if (type == 0 or type == 1 or type == 3):
#        labelfr.STButton4.configure(text='''Выбрать каталог''')
        labelfr.STButton4.configure(command=(lambda e=labelfr.SEntry2: selectDir(e)))
    elif (type == 2):
#        labelfr.STButton4.configure(text='''Выбрать файл''')
        labelfr.STButton4.configure(command=(lambda e=labelfr.SEntry2: selectFile(e, 10)))
    labelfr.STButton4.configure(image=selectdir, compound='left', background='white')

    if (type == 0):
        global labcl
######################
        style = ttk.Style()
        style.element_create("RoundedFrame",
                     "image", borderImage,
                     ("focus", borderImage),
                     border=4, sticky="nsew")
        style.layout("RoundedFrame", [("RoundedFrame", {"sticky": "nsew"})])
########################
        labelfr.configure(background='white')
        labelfr.LabelframeCl = ttk.LabelFrame(labelfr, style='RoundedFrame', text='Текущее время', labelanchor='n')
        labcl = Label(labelfr.LabelframeCl, text='token', bg='#eff0f1', anchor='center', font='monospace 12 bold roman')
        labcl.pack(padx='5mm', pady='0 2mm', side='bottom')
        labelfr.LabelframeCl.pack(anchor='center',
                              expand=0, fill='none', ipady=2, padx=25, pady='2mm', side='top')
        clock()

#    labelfr.STButton5 = ttk.Button(labelfr)
    labelfr.STButton5 = ttk.Button(labelfr)
    labelfr.STButton5.pack(in_=labelfr, anchor='n', expand=0,
                           fill='none', padx=20, pady=10, side='right')

    if (type == 1):
        labelfr.STButton5.configure(text='''Зашифровать файл''')
        labelfr.STButton5.configure(command=(lambda e=labelfr: cipherFile(e)))
    elif (type == 0):
        labelfr.STButton5.configure(text='''Подписать документ''')
        labelfr.STButton5.configure(command=(lambda e=labelfr: signFile(e)))
    elif (type == 2):
        labelfr.STButton5.configure(text='''Проверить ЭП''')
        labelfr.STButton5.configure(command=(lambda e=labelfr: checkSign(e)))
    elif (type == 3):
        labelfr.STButton5.configure(text='''Извлечь оригинал''')
        labelfr.STButton5.configure(command=(lambda e=labelfr: ejectFile(e)))
    elif (type == 4):
        labelfr.STButton5.configure(text='''Расшифровать файл''')
        labelfr.STButton5.configure(command=(lambda e=labelfr: decryptFile(e)))

def init(top, gui, *args, **kwargs):
    borderImageData = '''
R0lGODlhDwATAKUuAJaWlpqampubm5ycnKGhoaSkpKWlpaampqenp6mpqaqqqq2tra6urrCwsLi4uL6+vsHBwcLCwsfHx8nJycvLy83Nzc/Pz9DQ0NTU1NXV1dnZ2dzc
3N3d3eDg4OPj4+jo6Ovr6+7u7u/v7/Hx8fLy8vT09PX19fb29vf39/r6+vz8/P39/f7+/v///+/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w8e/w
8e/w8e/w8e/w8e/w8SH+EUNyZWF0ZWQgd2l0aCBHSU1QACH5BAEKAD8ALAAAAAAPABMAAAZkwFarwxgIjsiDRSWkNECnqPQ0mihUIcNKyO22JpdKxksmISIcshc1gKTV
XJTADY/P33U5vd7S4+F+fH13goF8hnmEhwISGoImBB4OghsQLAsYLHAfAyUtKQ8ABQekpAYBCSItQQA7
    '''
    global varBD
    global w, top_level, root, self1
    global openDB_16x16
    global exit_16x16
    global nss_32x32
    global svitok_40x16
    global img_svitok
    global img_opendb
    global img_anketa
    global img_exit
    global img_p11
    global xterm_echo
    global xterm_geo
    global nss_143x110
    global image_nss
    global me_393x295
    global image_me
    global patch_win
    global view_18x16
    global viewcert
    global icon_openfile_18x16
    global selectdir
    global update_18x16    
    global updatecert
    global helpview
    global borderImage
    global creator_small
    global img_creator
    
    varDB.set(1)
    varBut.set(0)
    lastBut.set(1)
    typeSign.set(1)
    typeEject.set(1)
    typeImport.set(0)
    typeExport.set(0)
    w = gui

# LISSI
    self1 = w
    top_level = top
    root = top
    try:
      # call a dummy dialog with an impossible option to initialize the file
      # dialog without really getting a dialog window; this will throw a
      # TclError, so we need a try...except :
        try:
            root.tk.call('tk_getOpenFile', '-foobarbaz')
        except TclError:
            pass
      # now set the magic variables accordingly
        if sys.platform != "win32":
            root.tk.call('set', '::tk::dialog::file::showHiddenBtn', '1')
            root.tk.call('set', '::tk::dialog::file::showHiddenVar', '0')
    except:
        pass

    if (sys.platform == "win32" and py3 != True):
        image_me = ImageTk.PhotoImage(data=me_393x295)
        image_nss = ImageTk.PhotoImage(data=nss_143x110)
        img_p11 = ImageTk.PhotoImage(data=nss_32x32)
        img_svitok = ImageTk.PhotoImage(data=svitok_40x16)
        img_opendb = ImageTk.PhotoImage(data=openDB_16x16)
        img_anketa = ImageTk.PhotoImage(data=anketa_34x50)
        img_exit = ImageTk.PhotoImage(data=exit_16x16)
        img_creator = ImageTk.PhotoImage(data=creator_small)
    else:
        image_me = PhotoImage(data=me_393x295)
        image_nss = PhotoImage(data=nss_143x110)
        img_p11 = PhotoImage(data=nss_32x32)
        img_svitok = PhotoImage(data=svitok_40x16)
        img_opendb = PhotoImage(data=openDB_16x16)
        img_anketa = PhotoImage(data=anketa_34x50)
        img_exit = PhotoImage(data=exit_16x16)
        img_creator = PhotoImage(data=creator_small)
        
    borderImage = PhotoImage(data=borderImageData)
    viewcert = PhotoImage(data=view_18x16)
    selectdir = PhotoImage(data=icon_openfile_18x16)
    updatecert = PhotoImage(data=update_18x16)

    self1.Label1.configure(image=image_nss)
    root.tk.call('wm', 'iconphoto', root._w, img_p11)

    self1.TLabel1.configure(image=img_svitok, compound='left')
    self1.TButton10.configure(image=img_exit,   compound='left')
    ttk.Style().map('TButton1',
                    foreground=[('disabled', 'yellow'),
                                ('pressed', 'red'),
                                ('active', 'blue')],
                    background=[('disabled', 'magenta'),
                                ('pressed', '!focus', 'cyan'),
                                ('active', 'green')],
                    highlightcolor=[('focus', 'green'),
                                    ('!focus', 'red')],
                    relief=[('pressed', 'groove'),
                            ('!pressed', 'raised')])
    ttk.Style().map('TRadiobutton',
                    foreground=[('disabled', '#00007f'),
                                ('pressed', 'red'),
                                ('active', 'blue')],
                    background=[('disabled', '#eff0f1'),
                                ('pressed', '!focus', 'cyan'),
                                ('active', 'green')],
                    highlightcolor=[('focus', 'green'),
                                    ('!focus', 'red')])
    frameAddLib(self1, self1.FrameRab[int('1')])
#Управление сертификатами 
    frameCertManager(self1.FrameRab[2])
#Подписать 
    frameSignFile(self1, self1.FrameRab[3], 0)
#Зашифровать
    frameSignFile(self1, self1.FrameRab[4], 1)
#Проверить подпись
    frameSignFile(self1, self1.FrameRab[5], 2)
#Извлечь оригинал из присоединенной подписи
    frameSignFile(self1, self1.FrameRab[6], 3)
#Расшифровать
#    frameSignFile(self1, self1.FrameRab[8], 3)
#Создать запрос на сертификат
    frameCreateReq(self1.FrameRab[7])
#Создать программный или облачный токен
    frameCreateToken(self1.FrameRab[8])
    
###############    
    meLabel = Label(self1.FrameRab[0])
    meLabel.pack(anchor='center',expand=1,fill='both', padx= 5,pady= 5,side='top')
    meLabel.configure(background="#f3f3f3")
    meLabel.configure(image=image_me)
    root.tk.call('tk', 'busy', 'hold', self1.Frame2)

    self1.TButton10.pack(in_=self1.Frame2,expand=1,fill='none',side= 'top' ,padx= 5)
###########
    helpview = Label(root, text="Просмотр сертификата", bg='#ffe0a6')
    ReloadNSS()
    self1.TButton11.configure(image=selectdir, compound='left', background='white')
    self1.TButton11.bind('<Enter>', lambda e=self1.TButton11: showhelp(e, self1.TButton11, helpview, 'Выбор каталога хранилища', 'right'))
    self1.TButton11.bind('<Leave>', lambda e=self1.TButton11: hidehelp(e, helpview))

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


if __name__ == '__main__':
    import NEW_NSS_LAST_OK
    NEW_NSS_LAST_OK.vp_start_gui()
